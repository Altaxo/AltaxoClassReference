<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>VectorMath Class</title><meta name="Title" content="VectorMath Class" /><meta name="Microsoft.Help.Id" content="T:Altaxo.Calc.LinearAlgebra.VectorMath" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Altaxo.Calc.LinearAlgebra.VectorMath class" /><meta name="System.Keywords" content="VectorMath class" /><meta name="Microsoft.Help.F1" content="Altaxo.Calc.LinearAlgebra.VectorMath" /><meta name="Microsoft.Help.F1" content="VectorMath" /><meta name="container" content="Altaxo.Calc.LinearAlgebra" /><meta name="file" content="T_Altaxo_Calc_LinearAlgebra_VectorMath" /><meta name="guid" content="T_Altaxo_Calc_LinearAlgebra_VectorMath" /><meta name="Description" content="VectorMath provides common static functions concerning vectors." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Altaxo user manual and class reference<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1B7FE024E7E614BFA13DAA1FD005CB2E.htm" title="Altaxo user manual and class reference" tocid="roottoc">Altaxo user manual and class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="Altaxo class reference" tocid="R_Project_Documentation">Altaxo class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo.htm" title="Altaxo Namespaces" tocid="G_Altaxo">Altaxo Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo_Calc.htm" title="Altaxo.Calc Namespaces" tocid="G_Altaxo_Calc">Altaxo.Calc Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Altaxo_Calc_LinearAlgebra.htm" title="Altaxo.Calc.LinearAlgebra" tocid="N_Altaxo_Calc_LinearAlgebra">Altaxo.Calc.LinearAlgebra</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Altaxo_Calc_LinearAlgebra_VectorMath.htm" title="VectorMath Class" tocid="T_Altaxo_Calc_LinearAlgebra_VectorMath">VectorMath Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Altaxo_Calc_LinearAlgebra_VectorMath.htm" title="VectorMath Methods" tocid="Methods_T_Altaxo_Calc_LinearAlgebra_VectorMath">VectorMath Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Vector<wbr />Math Class</h1></td></tr></table><div class="summary">
            VectorMath provides common static functions concerning vectors.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST1E44DE20_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <span class="selflink">Altaxo.Calc.LinearAlgebra<span id="LST1E44DE20_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>VectorMath</span><br /></div><br /><strong>Namespace:</strong> <a href="N_Altaxo_Calc_LinearAlgebra.htm">Altaxo.Calc.LinearAlgebra</a><br /><strong>Assembly:</strong> AltaxoCore (in AltaxoCore.dll) Version: 4.8.3261.0 (4.8.3261.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">VectorMath</span></pre></div></div></div></div><p>The <span class="selflink">VectorMath</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDKEA')" onkeypress="SectionExpandCollapse_CheckKey('IDKEA', event)" tabindex="0"><img id="IDKEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDKEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_4.htm">Add(<span id="LST1E44DE20_2" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>
            Adds all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_6.htm">Add(<span id="LST1E44DE20_4" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Adds all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add.htm">Add(IVector<span id="LST1E44DE20_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double)</a></td><td>
            Adds all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_1.htm">Add(IVector<span id="LST1E44DE20_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single)</a></td><td>
            Adds all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_8.htm">Add(<span id="LST1E44DE20_10" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single)</a></td><td>
            Adds all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_5.htm">Add(<span id="LST1E44DE20_12" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_14" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_15" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_16" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_17" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_7.htm">Add(<span id="LST1E44DE20_18" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_19" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_20" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_21" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_22" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_23" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_2.htm">Add(IReadOnlyList<span id="LST1E44DE20_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_3.htm">Add(IReadOnlyList<span id="LST1E44DE20_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Add_9.htm">Add(<span id="LST1E44DE20_36" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_38" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_39" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_40" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_41" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AddScaled_2.htm">AddScaled(<span id="LST1E44DE20_42" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_43" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_44" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_45" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, <span id="LST1E44DE20_46" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_47" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and (b scaled with scaleb) and stores the result in c, i.e. c = a + b * scaleb. All vectors must have the same length.
            The vectors a or b may be identical (the same instance) as c. 
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AddScaled_3.htm">AddScaled(<span id="LST1E44DE20_48" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_49" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_50" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_51" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_52" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_53" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and (b scaled with scaleb) and stores the result in c, i.e. c = a + b * scaleb. All vectors must have the same length.
            The vectors a or b may be identical (the same instance) as c. 
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AddScaled.htm">AddScaled(IReadOnlyList<span id="LST1E44DE20_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double, IVector<span id="LST1E44DE20_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds (elementwise) two vectors a and (b scaled with scaleb) and stores the result in c, i.e. c = a + b * scaleb. All vectors must have the same length.
            The vectors a or b may be identical (the same instance) as c. 
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AddScaled_1.htm">AddScaled(IReadOnlyList<span id="LST1E44DE20_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_62" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_63" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single, IVector<span id="LST1E44DE20_64" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Adds (elementwise) two vectors a and (b scaled with scaleb) and stores the result in c, i.e. c = a + b * scaleb. All vectors must have the same length.
            The vectors a or b may be identical (the same instance) as c. 
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AddScaled_4.htm">AddScaled(<span id="LST1E44DE20_66" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_67" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_68" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_69" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single, <span id="LST1E44DE20_70" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_71" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Adds (elementwise) two vectors a and (b scaled with scaleb) and stores the result in c, i.e. c = a + b * scaleb. All vectors must have the same length.
            The vectors a or b may be identical (the same instance) as c. 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_6.htm">Any(<span id="LST1E44DE20_72" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_73" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Determines whether the given <span class="parameter">vector</span> contains any elements.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_9.htm">Any(<span id="LST1E44DE20_74" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_75" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Determines whether the given <span class="parameter">vector</span> contains any elements.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any.htm">Any(IReadOnlyList<span id="LST1E44DE20_76" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_77" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether the given <span class="parameter">vector</span> contains any elements.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_3.htm">Any(IReadOnlyList<span id="LST1E44DE20_78" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_79" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether the given <span class="parameter">vector</span> contains any elements.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_12.htm">Any(<span id="LST1E44DE20_80" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_81" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Determines whether the given <span class="parameter">vector</span> contains any elements.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_7.htm">Any(<span id="LST1E44DE20_82" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_83" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_84" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Boolean<span id="LST1E44DE20_85" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_10.htm">Any(<span id="LST1E44DE20_86" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_87" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Boolean<span id="LST1E44DE20_89" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_1.htm">Any(IReadOnlyList<span id="LST1E44DE20_90" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_91" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_92" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Boolean<span id="LST1E44DE20_93" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_4.htm">Any(IReadOnlyList<span id="LST1E44DE20_94" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_95" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_96" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Boolean<span id="LST1E44DE20_97" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_13.htm">Any(<span id="LST1E44DE20_98" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_99" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_100" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Boolean<span id="LST1E44DE20_101" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_8.htm">Any(<span id="LST1E44DE20_102" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_103" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_104" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Boolean<span id="LST1E44DE20_105" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32<span id="LST1E44DE20_106" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_11.htm">Any(<span id="LST1E44DE20_107" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_108" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_109" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Boolean<span id="LST1E44DE20_110" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32<span id="LST1E44DE20_111" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_2.htm">Any(IReadOnlyList<span id="LST1E44DE20_112" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_113" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_114" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Boolean<span id="LST1E44DE20_115" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32<span id="LST1E44DE20_116" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_5.htm">Any(IReadOnlyList<span id="LST1E44DE20_117" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_118" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_119" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Boolean<span id="LST1E44DE20_120" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32<span id="LST1E44DE20_121" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Any_14.htm">Any(<span id="LST1E44DE20_122" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_123" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_124" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Boolean<span id="LST1E44DE20_125" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32<span id="LST1E44DE20_126" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Determines whether any element of the <span class="parameter">vector</span> satisfies a condition.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AreValuesEqual_2.htm">AreValuesEqual(<span id="LST1E44DE20_127" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_128" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_129" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_130" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AreValuesEqual_3.htm">AreValuesEqual(<span id="LST1E44DE20_131" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_132" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_133" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_134" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AreValuesEqual.htm">AreValuesEqual(IReadOnlyList<span id="LST1E44DE20_135" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_136" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_137" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_138" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AreValuesEqual_1.htm">AreValuesEqual(IReadOnlyList<span id="LST1E44DE20_139" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_140" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_141" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_142" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_AreValuesEqual_4.htm">AreValuesEqual(<span id="LST1E44DE20_143" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_144" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_145" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_146" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if and only if both vectors contain the same elements. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Average_2.htm">Average(<span id="LST1E44DE20_147" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_148" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Average_3.htm">Average(<span id="LST1E44DE20_149" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_150" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Average.htm">Average(IReadOnlyList<span id="LST1E44DE20_151" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_152" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Average_1.htm">Average(IReadOnlyList<span id="LST1E44DE20_153" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_154" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Average_4.htm">Average(<span id="LST1E44DE20_155" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_156" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Clone.htm">Clone(<span id="LST1E44DE20_157" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_158" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns a clone of the source vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Clone_1.htm">Clone(<span id="LST1E44DE20_159" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_160" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns a clone of the source vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Clone_2.htm">Clone(<span id="LST1E44DE20_161" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_162" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns a clone of the source vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Clone_3.htm">Clone(<span id="LST1E44DE20_163" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_164" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns a clone of the source vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Clone_4.htm">Clone(<span id="LST1E44DE20_165" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_166" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns a clone of the source vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy.htm">Copy(<span id="LST1E44DE20_167" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_168" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_169" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_170" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_1.htm">Copy(<span id="LST1E44DE20_171" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_172" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_173" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_174" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_32.htm">Copy(<span id="LST1E44DE20_175" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_176" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_177" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_178" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_33.htm">Copy(<span id="LST1E44DE20_179" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_180" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_181" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_182" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_36.htm">Copy(<span id="LST1E44DE20_183" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_184" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_185" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_186" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_37.htm">Copy(<span id="LST1E44DE20_187" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_188" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_189" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_190" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_38.htm">Copy(<span id="LST1E44DE20_191" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_192" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_193" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_194" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_39.htm">Copy(<span id="LST1E44DE20_195" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_196" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_197" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_198" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_46.htm">Copy(<span id="LST1E44DE20_199" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_200" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_201" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_202" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_47.htm">Copy(<span id="LST1E44DE20_203" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_204" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_205" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_206" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_4.htm">Copy(IReadOnlyList<span id="LST1E44DE20_207" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_208" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_209" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_210" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_5.htm">Copy(IReadOnlyList<span id="LST1E44DE20_211" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_212" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_213" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_214" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_8.htm">Copy(IReadOnlyList<span id="LST1E44DE20_215" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_216" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_217" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_218" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_9.htm">Copy(IReadOnlyList<span id="LST1E44DE20_219" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_220" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_221" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_222" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_12.htm">Copy(IReadOnlyList<span id="LST1E44DE20_223" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_224" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_225" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_226" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_13.htm">Copy(IReadOnlyList<span id="LST1E44DE20_227" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_228" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_229" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_230" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_14.htm">Copy(IReadOnlyList<span id="LST1E44DE20_231" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_232" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_233" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_234" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_15.htm">Copy(IReadOnlyList<span id="LST1E44DE20_235" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_236" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_237" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_238" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_22.htm">Copy(IReadOnlyList<span id="LST1E44DE20_239" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_240" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_241" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_242" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_23.htm">Copy(IReadOnlyList<span id="LST1E44DE20_243" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_244" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_245" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_246" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_24.htm">Copy(IReadOnlyList<span id="LST1E44DE20_247" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_248" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_249" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_250" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_25.htm">Copy(IReadOnlyList<span id="LST1E44DE20_251" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_252" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_253" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_254" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_26.htm">Copy(IReadOnlyList<span id="LST1E44DE20_255" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_256" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_257" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_258" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_31.htm">Copy(IReadOnlyList<span id="LST1E44DE20_259" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_260" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_261" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_262" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_48.htm">Copy(<span id="LST1E44DE20_263" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_264" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_265" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_266" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_49.htm">Copy(<span id="LST1E44DE20_267" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_268" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IVector<span id="LST1E44DE20_269" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_270" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_50.htm">Copy(<span id="LST1E44DE20_271" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_272" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_273" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_274" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_55.htm">Copy(<span id="LST1E44DE20_275" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_276" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_277" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_278" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Copies the source vector to the destination vector. Both vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_2.htm">Copy(<span id="LST1E44DE20_279" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_280" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_281" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_282" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_3.htm">Copy(<span id="LST1E44DE20_283" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_284" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_285" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_286" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_34.htm">Copy(<span id="LST1E44DE20_287" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_288" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_289" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_290" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_35.htm">Copy(<span id="LST1E44DE20_291" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_292" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_293" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_294" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_40.htm">Copy(<span id="LST1E44DE20_295" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_296" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_297" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_298" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_41.htm">Copy(<span id="LST1E44DE20_299" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_300" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_301" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_302" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_42.htm">Copy(<span id="LST1E44DE20_303" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_304" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_305" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_306" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_43.htm">Copy(<span id="LST1E44DE20_307" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_308" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_309" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_310" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_44.htm">Copy(<span id="LST1E44DE20_311" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_312" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_313" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_314" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_45.htm">Copy(<span id="LST1E44DE20_315" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_316" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_317" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_318" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_6.htm">Copy(IReadOnlyList<span id="LST1E44DE20_319" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_320" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_321" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_322" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_7.htm">Copy(IReadOnlyList<span id="LST1E44DE20_323" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_324" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_325" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_326" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_10.htm">Copy(IReadOnlyList<span id="LST1E44DE20_327" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_328" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_329" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_330" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_11.htm">Copy(IReadOnlyList<span id="LST1E44DE20_331" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_332" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_333" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_334" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_16.htm">Copy(IReadOnlyList<span id="LST1E44DE20_335" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_336" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_337" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_338" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_17.htm">Copy(IReadOnlyList<span id="LST1E44DE20_339" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_340" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_341" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_342" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_18.htm">Copy(IReadOnlyList<span id="LST1E44DE20_343" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_344" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_345" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_346" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_19.htm">Copy(IReadOnlyList<span id="LST1E44DE20_347" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_348" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_349" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_350" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_20.htm">Copy(IReadOnlyList<span id="LST1E44DE20_351" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_352" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_353" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_354" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_21.htm">Copy(IReadOnlyList<span id="LST1E44DE20_355" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_356" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_357" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_358" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_27.htm">Copy(IReadOnlyList<span id="LST1E44DE20_359" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_360" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_361" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_362" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_28.htm">Copy(IReadOnlyList<span id="LST1E44DE20_363" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_364" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, IVector<span id="LST1E44DE20_365" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_366" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_29.htm">Copy(IReadOnlyList<span id="LST1E44DE20_367" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_368" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_369" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_370" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_30.htm">Copy(IReadOnlyList<span id="LST1E44DE20_371" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_372" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_373" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_374" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_51.htm">Copy(<span id="LST1E44DE20_375" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_376" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_377" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_378" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_52.htm">Copy(<span id="LST1E44DE20_379" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_380" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, IVector<span id="LST1E44DE20_381" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_382" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_53.htm">Copy(<span id="LST1E44DE20_383" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_384" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_385" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_386" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy_54.htm">Copy(<span id="LST1E44DE20_387" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_388" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_389" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_390" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Copies elements of a source vector to a destination vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Copy__1.htm">Copy<span id="LST1E44DE20_391" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_392" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_393" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_394" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, <span id="LST1E44DE20_395" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST1E44DE20_396" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td> </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartEndLength.htm">CreateEquidistantSequenceByStartEndLength(Double, Double, Int32)</a></td><td>
            Creates a read-only vector with equidistant element values from start to end. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartEndLength_1.htm">CreateEquidistantSequenceByStartEndLength(Int16, Int16, Int32)</a></td><td>
            Creates a read-only vector with equidistant element values from start to end. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartEndLength_2.htm">CreateEquidistantSequenceByStartEndLength(Int32, Int32, Int32)</a></td><td>
            Creates a read-only vector with equidistant element values from start to end. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartEndLength_3.htm">CreateEquidistantSequenceByStartEndLength(SByte, SByte, Int32)</a></td><td>
            Creates a read-only vector with equidistant element values from start to end. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartEndLength_4.htm">CreateEquidistantSequenceByStartEndLength(Single, Single, Int32)</a></td><td>
            Creates a read-only vector with equidistant element values from start to end. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartStepLength.htm">CreateEquidistantSequenceByStartStepLength(Double, Double, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements with values from start to start+(length-1)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartStepLength_1.htm">CreateEquidistantSequenceByStartStepLength(Int16, Int16, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements with values from start to start+(length-1)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartStepLength_2.htm">CreateEquidistantSequenceByStartStepLength(Int32, Int32, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements with values from start to start+(length-1)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartStepLength_3.htm">CreateEquidistantSequenceByStartStepLength(SByte, SByte, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements with values from start to start+(length-1)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequenceByStartStepLength_4.htm">CreateEquidistantSequenceByStartStepLength(Single, Single, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements with values from start to start+(length-1)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequencyByStartAtOffsetStepLength.htm">CreateEquidistantSequencyByStartAtOffsetStepLength(Double, Int32, Double, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements from start - startOffset*step to start + (length - 1 -startOffset)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequencyByStartAtOffsetStepLength_1.htm">CreateEquidistantSequencyByStartAtOffsetStepLength(Int16, Int32, Int16, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements from start - startOffset*step to start + (length - 1 -startOffset)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequencyByStartAtOffsetStepLength_2.htm">CreateEquidistantSequencyByStartAtOffsetStepLength(Int32, Int32, Int32, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements from start - startOffset*step to start + (length - 1 -startOffset)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequencyByStartAtOffsetStepLength_3.htm">CreateEquidistantSequencyByStartAtOffsetStepLength(SByte, Int32, SByte, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements from start - startOffset*step to start + (length - 1 -startOffset)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateEquidistantSequencyByStartAtOffsetStepLength_4.htm">CreateEquidistantSequencyByStartAtOffsetStepLength(Single, Int32, Single, Int32)</a></td><td>
            Creates a read-only vector with equidistant elements from start - startOffset*step to start + (length - 1 -startOffset)*step. The created vector
            consumes memory only for the three variables, independent of its length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_CreateExtensibleVector__1.htm">CreateExtensibleVector<span id="LST1E44DE20_397" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_398" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates a new extensible vector of length <span class="code">length</span></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Divide.htm">Divide(Double, IVector<span id="LST1E44DE20_399" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_400" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Sets the element of the vector to the result of scalar x divided by each element y[i].
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Divide_1.htm">Divide(Double, <span id="LST1E44DE20_401" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_402" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Sets the element of the vector to the result of scalar x divided by each element y[i].
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Divide_2.htm">Divide(Int32, <span id="LST1E44DE20_403" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_404" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Sets the element of the vector to the result of scalar x divided by each element y[i].
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Divide_3.htm">Divide(Single, IVector<span id="LST1E44DE20_405" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_406" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Sets the element of the vector to the result of scalar x divided by each element y[i].
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Divide_4.htm">Divide(Single, <span id="LST1E44DE20_407" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_408" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Sets the element of the vector to the result of scalar x divided by each element y[i].
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_DotProduct_2.htm">DotProduct(<span id="LST1E44DE20_409" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_410" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_411" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_412" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the dot product of vector1 and vector2.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_DotProduct_3.htm">DotProduct(<span id="LST1E44DE20_413" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_414" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_415" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_416" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the dot product of vector1 and vector2.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_DotProduct.htm">DotProduct(IReadOnlyList<span id="LST1E44DE20_417" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_418" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_419" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_420" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the dot product of vector1 and vector2.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_DotProduct_1.htm">DotProduct(IReadOnlyList<span id="LST1E44DE20_421" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_422" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_423" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_424" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the dot product of vector1 and vector2.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_DotProduct_4.htm">DotProduct(<span id="LST1E44DE20_425" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_426" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_427" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_428" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the dot product of vector1 and vector2.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsAt__1_1.htm">ElementsAt<span id="LST1E44DE20_429" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_430" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_431" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST1E44DE20_432" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_433" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_434" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsAt__1.htm">ElementsAt<span id="LST1E44DE20_435" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_436" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_437" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_438" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_439" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_440" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsWhere__1_2.htm">ElementsWhere<span id="LST1E44DE20_441" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_442" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_443" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST1E44DE20_444" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_445" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_446" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsWhere__1_3.htm">ElementsWhere<span id="LST1E44DE20_447" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_448" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_449" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST1E44DE20_450" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, IEnumerable<span id="LST1E44DE20_451" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_452" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsWhere__1.htm">ElementsWhere<span id="LST1E44DE20_453" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_454" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_455" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_456" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_457" data-languageSpecificText="cpp=array&lt;"></span>Boolean<span id="LST1E44DE20_458" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ElementsWhere__1_1.htm">ElementsWhere<span id="LST1E44DE20_459" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_460" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_461" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_462" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IEnumerable<span id="LST1E44DE20_463" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LST1E44DE20_464" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td> </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanDistance_2.htm">EuclideanDistance(<span id="LST1E44DE20_465" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_466" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_467" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_468" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the Euclidean distance of two vectors, i.e. the L2-norm of the difference of the two vectors.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanDistance_3.htm">EuclideanDistance(<span id="LST1E44DE20_469" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_470" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_471" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_472" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the Euclidean distance of two vectors, i.e. the L2-norm of the difference of the two vectors.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanDistance.htm">EuclideanDistance(IReadOnlyList<span id="LST1E44DE20_473" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_474" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_475" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_476" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the Euclidean distance of two vectors, i.e. the L2-norm of the difference of the two vectors.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanDistance_1.htm">EuclideanDistance(IReadOnlyList<span id="LST1E44DE20_477" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_478" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_479" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_480" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the Euclidean distance of two vectors, i.e. the L2-norm of the difference of the two vectors.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanDistance_4.htm">EuclideanDistance(<span id="LST1E44DE20_481" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_482" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_483" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_484" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the Euclidean distance of two vectors, i.e. the L2-norm of the difference of the two vectors.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanNorm_2.htm">EuclideanNorm(<span id="LST1E44DE20_485" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_486" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanNorm_3.htm">EuclideanNorm(<span id="LST1E44DE20_487" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_488" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanNorm.htm">EuclideanNorm(IReadOnlyList<span id="LST1E44DE20_489" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_490" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanNorm_1.htm">EuclideanNorm(IReadOnlyList<span id="LST1E44DE20_491" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_492" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_EuclideanNorm_4.htm">EuclideanNorm(<span id="LST1E44DE20_493" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_494" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ExcessKurtosisOfNormalized_2.htm">ExcessKurtosisOfNormalized(<span id="LST1E44DE20_495" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_496" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the excess kurtosis of the elements in <span class="parameter">vector</span>. The excess kurtosis is defined as
            excesskurtosis(X) = E{X^4} - 3(E{X²})². 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ExcessKurtosisOfNormalized_3.htm">ExcessKurtosisOfNormalized(<span id="LST1E44DE20_497" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_498" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the excess kurtosis of the elements in <span class="parameter">vector</span>. The excess kurtosis is defined as
            excesskurtosis(X) = E{X^4} - 3(E{X²})². 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ExcessKurtosisOfNormalized.htm">ExcessKurtosisOfNormalized(IReadOnlyList<span id="LST1E44DE20_499" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_500" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the excess kurtosis of the elements in <span class="parameter">vector</span>. The excess kurtosis is defined as
            excesskurtosis(X) = E{X^4} - 3(E{X²})². 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ExcessKurtosisOfNormalized_1.htm">ExcessKurtosisOfNormalized(IReadOnlyList<span id="LST1E44DE20_501" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_502" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the excess kurtosis of the elements in <span class="parameter">vector</span>. The excess kurtosis is defined as
            excesskurtosis(X) = E{X^4} - 3(E{X²})². 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ExcessKurtosisOfNormalized_4.htm">ExcessKurtosisOfNormalized(<span id="LST1E44DE20_503" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_504" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the excess kurtosis of the elements in <span class="parameter">vector</span>. The excess kurtosis is defined as
            excesskurtosis(X) = E{X^4} - 3(E{X²})². 
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith_2.htm">FillWith(<span id="LST1E44DE20_505" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_506" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>
            Fills a vector with a certain value. so that all elements are equal.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith_3.htm">FillWith(<span id="LST1E44DE20_507" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_508" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Fills a vector with a certain value. so that all elements are equal.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith.htm">FillWith(IVector<span id="LST1E44DE20_509" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_510" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double)</a></td><td>
            Fills a vector with a certain value. so that all elements are equal.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith_1.htm">FillWith(IVector<span id="LST1E44DE20_511" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_512" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single)</a></td><td>
            Fills a vector with a certain value. so that all elements are equal.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith_4.htm">FillWith(<span id="LST1E44DE20_513" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_514" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single)</a></td><td>
            Fills a vector with a certain value. so that all elements are equal.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWith__1.htm">FillWith<span id="LST1E44DE20_515" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_516" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Vector<span id="LST1E44DE20_517" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_518" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T)</a></td><td> </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWithLinearSequenceGivenByStartAndEnd_2.htm">FillWithLinearSequenceGivenByStartAndEnd(<span id="LST1E44DE20_519" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_520" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, Double)</a></td><td>
            Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWithLinearSequenceGivenByStartAndEnd_3.htm">FillWithLinearSequenceGivenByStartAndEnd(<span id="LST1E44DE20_521" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_522" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWithLinearSequenceGivenByStartAndEnd.htm">FillWithLinearSequenceGivenByStartAndEnd(IVector<span id="LST1E44DE20_523" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_524" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double, Double)</a></td><td>
            Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWithLinearSequenceGivenByStartAndEnd_1.htm">FillWithLinearSequenceGivenByStartAndEnd(IVector<span id="LST1E44DE20_525" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_526" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single, Single)</a></td><td>
            Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_FillWithLinearSequenceGivenByStartAndEnd_4.htm">FillWithLinearSequenceGivenByStartAndEnd(<span id="LST1E44DE20_527" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_528" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single, Single)</a></td><td>
            Fills the vector v with a linear sequence beginning from start (first element) until end (last element).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetConstantVector.htm">GetConstantVector(Double, Int32)</a></td><td>
            Gets a vector with all elements equal to a provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetConstantVector_1.htm">GetConstantVector(Int16, Int32)</a></td><td>
            Gets a vector with all elements equal to a provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetConstantVector_2.htm">GetConstantVector(Int32, Int32)</a></td><td>
            Gets a vector with all elements equal to a provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetConstantVector_3.htm">GetConstantVector(SByte, Int32)</a></td><td>
            Gets a vector with all elements equal to a provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetConstantVector_4.htm">GetConstantVector(Single, Int32)</a></td><td>
            Gets a vector with all elements equal to a provided value.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_4.htm">GetUsedLength(<span id="LST1E44DE20_529" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_530" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength.htm">GetUsedLength(IReadOnlyList<span id="LST1E44DE20_531" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_532" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_2.htm">GetUsedLength(IReadOnlyList<span id="LST1E44DE20_533" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_534" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_6.htm">GetUsedLength(<span id="LST1E44DE20_535" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_536" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_5.htm">GetUsedLength(<span id="LST1E44DE20_537" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_538" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from Double.NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_1.htm">GetUsedLength(IReadOnlyList<span id="LST1E44DE20_539" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_540" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from Double.NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_3.htm">GetUsedLength(IReadOnlyList<span id="LST1E44DE20_541" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_542" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from Double.NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_GetUsedLength_7.htm">GetUsedLength(<span id="LST1E44DE20_543" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_544" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Returns the used length of the vector. This is one more than the highest index of the element that is different from Double.NaN.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxAbsoluteValue_2.htm">IndexOfMaxAbsoluteValue(<span id="LST1E44DE20_545" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_546" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxAbsoluteValue_3.htm">IndexOfMaxAbsoluteValue(<span id="LST1E44DE20_547" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_548" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxAbsoluteValue.htm">IndexOfMaxAbsoluteValue(IReadOnlyList<span id="LST1E44DE20_549" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_550" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the maximum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxAbsoluteValue_1.htm">IndexOfMaxAbsoluteValue(IReadOnlyList<span id="LST1E44DE20_551" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_552" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the maximum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxAbsoluteValue_4.htm">IndexOfMaxAbsoluteValue(<span id="LST1E44DE20_553" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_554" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxValue_2.htm">IndexOfMaxValue(<span id="LST1E44DE20_555" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_556" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum  value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxValue_3.htm">IndexOfMaxValue(<span id="LST1E44DE20_557" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_558" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum  value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxValue.htm">IndexOfMaxValue(IReadOnlyList<span id="LST1E44DE20_559" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_560" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the maximum  value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxValue_1.htm">IndexOfMaxValue(IReadOnlyList<span id="LST1E44DE20_561" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_562" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the maximum  value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMaxValue_4.htm">IndexOfMaxValue(<span id="LST1E44DE20_563" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_564" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the maximum  value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinAbsoluteValue_2.htm">IndexOfMinAbsoluteValue(<span id="LST1E44DE20_565" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_566" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinAbsoluteValue_3.htm">IndexOfMinAbsoluteValue(<span id="LST1E44DE20_567" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_568" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinAbsoluteValue.htm">IndexOfMinAbsoluteValue(IReadOnlyList<span id="LST1E44DE20_569" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_570" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the minimum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinAbsoluteValue_1.htm">IndexOfMinAbsoluteValue(IReadOnlyList<span id="LST1E44DE20_571" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_572" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the minimum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinAbsoluteValue_4.htm">IndexOfMinAbsoluteValue(<span id="LST1E44DE20_573" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_574" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum absolute value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinValue_2.htm">IndexOfMinValue(<span id="LST1E44DE20_575" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_576" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinValue_3.htm">IndexOfMinValue(<span id="LST1E44DE20_577" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_578" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinValue.htm">IndexOfMinValue(IReadOnlyList<span id="LST1E44DE20_579" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_580" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the minimum value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinValue_1.htm">IndexOfMinValue(IReadOnlyList<span id="LST1E44DE20_581" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_582" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Return the index of the first element with the minimum value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IndexOfMinValue_4.htm">IndexOfMinValue(<span id="LST1E44DE20_583" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_584" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Return the index of the first element with the minimum value in a vector</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyDecreasing_2.htm">IsStrictlyDecreasing(<span id="LST1E44DE20_585" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_586" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyDecreasing_3.htm">IsStrictlyDecreasing(<span id="LST1E44DE20_587" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_588" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyDecreasing.htm">IsStrictlyDecreasing(IReadOnlyList<span id="LST1E44DE20_589" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_590" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyDecreasing_1.htm">IsStrictlyDecreasing(IReadOnlyList<span id="LST1E44DE20_591" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_592" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyDecreasing_4.htm">IsStrictlyDecreasing(<span id="LST1E44DE20_593" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_594" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasing_2.htm">IsStrictlyIncreasing(<span id="LST1E44DE20_595" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_596" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasing_3.htm">IsStrictlyIncreasing(<span id="LST1E44DE20_597" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_598" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasing.htm">IsStrictlyIncreasing(IReadOnlyList<span id="LST1E44DE20_599" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_600" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasing_1.htm">IsStrictlyIncreasing(IReadOnlyList<span id="LST1E44DE20_601" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_602" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasing_4.htm">IsStrictlyIncreasing(<span id="LST1E44DE20_603" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_604" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_4.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_605" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_606" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_6.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_607" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_608" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing.htm">IsStrictlyIncreasingOrDecreasing(IReadOnlyList<span id="LST1E44DE20_609" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_610" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_2.htm">IsStrictlyIncreasingOrDecreasing(IReadOnlyList<span id="LST1E44DE20_611" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_612" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_8.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_613" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_614" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_5.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_615" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_616" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Boolean<span id="LST1E44DE20_617" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_7.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_618" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_619" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Boolean<span id="LST1E44DE20_620" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_1.htm">IsStrictlyIncreasingOrDecreasing(IReadOnlyList<span id="LST1E44DE20_621" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_622" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Boolean<span id="LST1E44DE20_623" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_3.htm">IsStrictlyIncreasingOrDecreasing(IReadOnlyList<span id="LST1E44DE20_624" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_625" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Boolean<span id="LST1E44DE20_626" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_IsStrictlyIncreasingOrDecreasing_9.htm">IsStrictlyIncreasingOrDecreasing(<span id="LST1E44DE20_627" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_628" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Boolean<span id="LST1E44DE20_629" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns true if the sequence given by the vector argument is strictly increasing or decreasing.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Kurtosis_2.htm">Kurtosis(<span id="LST1E44DE20_630" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_631" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the kurtosis of the elements in <span class="parameter">vector</span>. The kurtosis is defined as
            kurtosis(X) = E{(X-µ)^4}/((E{(X-µ)²})².
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Kurtosis_3.htm">Kurtosis(<span id="LST1E44DE20_632" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_633" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the kurtosis of the elements in <span class="parameter">vector</span>. The kurtosis is defined as
            kurtosis(X) = E{(X-µ)^4}/((E{(X-µ)²})².
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Kurtosis.htm">Kurtosis(IReadOnlyList<span id="LST1E44DE20_634" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_635" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the kurtosis of the elements in <span class="parameter">vector</span>. The kurtosis is defined as
            kurtosis(X) = E{(X-µ)^4}/((E{(X-µ)²})².
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Kurtosis_1.htm">Kurtosis(IReadOnlyList<span id="LST1E44DE20_636" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_637" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the kurtosis of the elements in <span class="parameter">vector</span>. The kurtosis is defined as
            kurtosis(X) = E{(X-µ)^4}/((E{(X-µ)²})².
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Kurtosis_4.htm">Kurtosis(<span id="LST1E44DE20_638" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_639" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the kurtosis of the elements in <span class="parameter">vector</span>. The kurtosis is defined as
            kurtosis(X) = E{(X-µ)^4}/((E{(X-µ)²})².
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L1Norm_2.htm">L1Norm(<span id="LST1E44DE20_640" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_641" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Calculates the L1 norm of the vector (as the sum of the absolute values of the elements).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L1Norm_3.htm">L1Norm(<span id="LST1E44DE20_642" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_643" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Calculates the L1 norm of the vector (as the sum of the absolute values of the elements).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L1Norm.htm">L1Norm(IReadOnlyList<span id="LST1E44DE20_644" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_645" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Calculates the L1 norm of the vector (as the sum of the absolute values of the elements).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L1Norm_1.htm">L1Norm(IReadOnlyList<span id="LST1E44DE20_646" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_647" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Calculates the L1 norm of the vector (as the sum of the absolute values of the elements).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L1Norm_4.htm">L1Norm(<span id="LST1E44DE20_648" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_649" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Calculates the L1 norm of the vector (as the sum of the absolute values of the elements).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_4.htm">L2Norm(<span id="LST1E44DE20_650" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_651" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_6.htm">L2Norm(<span id="LST1E44DE20_652" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_653" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm.htm">L2Norm(IReadOnlyList<span id="LST1E44DE20_654" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_655" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_2.htm">L2Norm(IReadOnlyList<span id="LST1E44DE20_656" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_657" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_8.htm">L2Norm(<span id="LST1E44DE20_658" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_659" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_5.htm">L2Norm(<span id="LST1E44DE20_660" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_661" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_7.htm">L2Norm(<span id="LST1E44DE20_662" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_663" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_1.htm">L2Norm(IReadOnlyList<span id="LST1E44DE20_664" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_665" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_3.htm">L2Norm(IReadOnlyList<span id="LST1E44DE20_666" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_667" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_L2Norm_9.htm">L2Norm(<span id="LST1E44DE20_668" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_669" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>Given an n-vector x, this function calculates the euclidean norm of x.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Lerp.htm">Lerp(Double, Double, IReadOnlyList<span id="LST1E44DE20_670" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_671" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double, IReadOnlyList<span id="LST1E44DE20_672" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_673" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_674" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_675" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Performs linear interpolation between two vectors at specified points.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Lerp_1.htm">Lerp(Double, Double, IReadOnlyList<span id="LST1E44DE20_676" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_677" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double, IReadOnlyList<span id="LST1E44DE20_678" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_679" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_680" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_681" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>Performs linear interpolation between two vectors at specified points.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Lerp_2.htm">Lerp(Double, Double, <span id="LST1E44DE20_682" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_683" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, <span id="LST1E44DE20_684" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_685" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_686" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_687" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Performs linear interpolation between two vectors at specified points.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Lerp_3.htm">Lerp(Double, Double, <span id="LST1E44DE20_688" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_689" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, <span id="LST1E44DE20_690" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_691" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_692" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_693" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Performs linear interpolation between two vectors at specified points.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Lerp_4.htm">Lerp(Double, Double, <span id="LST1E44DE20_694" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_695" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, <span id="LST1E44DE20_696" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_697" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_698" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_699" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Performs linear interpolation between two vectors at specified points.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_4.htm">LInfinityNorm(<span id="LST1E44DE20_700" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_701" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the provided <span class="parameter">vector</span> (as is the maximum of the absolute value of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_6.htm">LInfinityNorm(<span id="LST1E44DE20_702" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_703" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the provided <span class="parameter">vector</span> (as is the maximum of the absolute value of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm.htm">LInfinityNorm(IReadOnlyList<span id="LST1E44DE20_704" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_705" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the L-infinity norm of the provided <span class="parameter">vector</span> (as is the maximum of the absolute value of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_2.htm">LInfinityNorm(IReadOnlyList<span id="LST1E44DE20_706" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_707" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the L-infinity norm of the provided <span class="parameter">vector</span> (as is the maximum of the absolute value of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_8.htm">LInfinityNorm(<span id="LST1E44DE20_708" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_709" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the provided <span class="parameter">vector</span> (as is the maximum of the absolute value of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_5.htm">LInfinityNorm(<span id="LST1E44DE20_710" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_711" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_712" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_713" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the difference of <span class="parameter">vector1</span> and <span class="parameter">vector2</span> (as is the maximum of the absolute value of the differences of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_7.htm">LInfinityNorm(<span id="LST1E44DE20_714" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_715" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_716" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_717" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the difference of <span class="parameter">vector1</span> and <span class="parameter">vector2</span> (as is the maximum of the absolute value of the differences of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_1.htm">LInfinityNorm(IReadOnlyList<span id="LST1E44DE20_718" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_719" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_720" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_721" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the L-infinity norm of the difference of <span class="parameter">vector1</span> and <span class="parameter">vector2</span> (as is the maximum of the absolute value of the differences of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_3.htm">LInfinityNorm(IReadOnlyList<span id="LST1E44DE20_722" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_723" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_724" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_725" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the L-infinity norm of the difference of <span class="parameter">vector1</span> and <span class="parameter">vector2</span> (as is the maximum of the absolute value of the differences of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LInfinityNorm_9.htm">LInfinityNorm(<span id="LST1E44DE20_726" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_727" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_728" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_729" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the L-infinity norm of the difference of <span class="parameter">vector1</span> and <span class="parameter">vector2</span> (as is the maximum of the absolute value of the differences of the elements). If one
            of the elements of the vector is invalid, the return value is also invalid (for the floating point types).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LpNorm_2.htm">LpNorm(<span id="LST1E44DE20_730" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_731" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>Compute the p Norm of this vector.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LpNorm_3.htm">LpNorm(<span id="LST1E44DE20_732" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_733" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>Compute the p Norm of this vector.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LpNorm.htm">LpNorm(IReadOnlyList<span id="LST1E44DE20_734" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_735" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double)</a></td><td>Compute the p Norm of this vector.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LpNorm_1.htm">LpNorm(IReadOnlyList<span id="LST1E44DE20_736" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_737" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double)</a></td><td>Compute the p Norm of this vector.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_LpNorm_4.htm">LpNorm(<span id="LST1E44DE20_738" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_739" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>Compute the p Norm of this vector.</td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_10.htm">Map(<span id="LST1E44DE20_740" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_741" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_742" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double<span id="LST1E44DE20_743" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_12.htm">Map(<span id="LST1E44DE20_744" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_745" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_746" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LST1E44DE20_747" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map.htm">Map(IVector<span id="LST1E44DE20_748" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_749" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_750" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double<span id="LST1E44DE20_751" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_1.htm">Map(IVector<span id="LST1E44DE20_752" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_753" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_754" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single<span id="LST1E44DE20_755" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_16.htm">Map(<span id="LST1E44DE20_756" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_757" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_758" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single<span id="LST1E44DE20_759" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_11.htm">Map(<span id="LST1E44DE20_760" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_761" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_762" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double<span id="LST1E44DE20_763" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_764" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_765" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_13.htm">Map(<span id="LST1E44DE20_766" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_767" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_768" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32<span id="LST1E44DE20_769" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_770" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_771" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_4.htm">Map(IReadOnlyList<span id="LST1E44DE20_772" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_773" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_774" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double<span id="LST1E44DE20_775" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_776" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_777" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_7.htm">Map(IReadOnlyList<span id="LST1E44DE20_778" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_779" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_780" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single<span id="LST1E44DE20_781" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_782" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_783" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_17.htm">Map(<span id="LST1E44DE20_784" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_785" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_786" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single<span id="LST1E44DE20_787" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_788" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_789" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_9.htm">Map(<span id="LST1E44DE20_790" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_791" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_792" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_793" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_794" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double<span id="LST1E44DE20_795" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_796" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_797" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_14.htm">Map(<span id="LST1E44DE20_798" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_799" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_800" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_801" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_802" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32<span id="LST1E44DE20_803" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_804" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_805" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_3.htm">Map(IReadOnlyList<span id="LST1E44DE20_806" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_807" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_808" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_809" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_810" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double<span id="LST1E44DE20_811" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_812" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_813" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_6.htm">Map(IReadOnlyList<span id="LST1E44DE20_814" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_815" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_816" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_817" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_818" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single<span id="LST1E44DE20_819" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_820" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_821" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_18.htm">Map(<span id="LST1E44DE20_822" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_823" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_824" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_825" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_826" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single<span id="LST1E44DE20_827" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_828" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_829" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_8.htm">Map(<span id="LST1E44DE20_830" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_831" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_832" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_833" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_834" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_835" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_836" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double, Double<span id="LST1E44DE20_837" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_838" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_839" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_15.htm">Map(<span id="LST1E44DE20_840" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_841" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_842" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_843" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_844" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_845" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_846" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32<span id="LST1E44DE20_847" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_848" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_849" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_2.htm">Map(IReadOnlyList<span id="LST1E44DE20_850" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_851" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_852" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_853" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_854" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_855" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_856" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double, Double<span id="LST1E44DE20_857" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_858" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_859" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_5.htm">Map(IReadOnlyList<span id="LST1E44DE20_860" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_861" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_862" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_863" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_864" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_865" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_866" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single, Single<span id="LST1E44DE20_867" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_868" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_869" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map_19.htm">Map(<span id="LST1E44DE20_870" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_871" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_872" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_873" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_874" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_875" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_876" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single, Single<span id="LST1E44DE20_877" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_878" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_879" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_8.htm">Map<span id="LST1E44DE20_880" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_881" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_882" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_883" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_884" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, T1, Double<span id="LST1E44DE20_885" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_886" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_887" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_11.htm">Map<span id="LST1E44DE20_888" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_889" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_890" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_891" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_892" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T1, Int32<span id="LST1E44DE20_893" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_894" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_895" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_2.htm">Map<span id="LST1E44DE20_896" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_897" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_898" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_899" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_900" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, T1, Double<span id="LST1E44DE20_901" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_902" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_903" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_5.htm">Map<span id="LST1E44DE20_904" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_905" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_906" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_907" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_908" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, T1, Single<span id="LST1E44DE20_909" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_910" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_911" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_14.htm">Map<span id="LST1E44DE20_912" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_913" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_914" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_915" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_916" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, T1, Single<span id="LST1E44DE20_917" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_918" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_919" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_7.htm">Map<span id="LST1E44DE20_920" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_921" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_922" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_923" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_924" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_925" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_926" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, T1, Double<span id="LST1E44DE20_927" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_928" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_929" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_10.htm">Map<span id="LST1E44DE20_930" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_931" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_932" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_933" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_934" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_935" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_936" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T1, Int32<span id="LST1E44DE20_937" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_938" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_939" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_1.htm">Map<span id="LST1E44DE20_940" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_941" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_942" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_943" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_944" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_945" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_946" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, T1, Double<span id="LST1E44DE20_947" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_948" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_949" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_4.htm">Map<span id="LST1E44DE20_950" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_951" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_952" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_953" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_954" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_955" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_956" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, T1, Single<span id="LST1E44DE20_957" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_958" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_959" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_13.htm">Map<span id="LST1E44DE20_960" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_961" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_962" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_963" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_964" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_965" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_966" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, T1, Single<span id="LST1E44DE20_967" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_968" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_969" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_6.htm">Map<span id="LST1E44DE20_970" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_971" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_972" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_973" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_974" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_975" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_976" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_977" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_978" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double, T1, Double<span id="LST1E44DE20_979" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_980" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_981" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_9.htm">Map<span id="LST1E44DE20_982" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_983" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_984" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_985" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_986" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_987" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_988" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_989" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_990" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, T1, Int32<span id="LST1E44DE20_991" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_992" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_993" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1.htm">Map<span id="LST1E44DE20_994" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_995" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_996" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_997" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_998" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_999" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1000" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1001" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_1002" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double, Double, Double, T1, Double<span id="LST1E44DE20_1003" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1004" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1005" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_3.htm">Map<span id="LST1E44DE20_1006" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_1007" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IReadOnlyList<span id="LST1E44DE20_1008" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1009" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1010" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1011" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1012" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1013" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, T1, Func<span id="LST1E44DE20_1014" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single, T1, Single<span id="LST1E44DE20_1015" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1016" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1017" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Map__1_12.htm">Map<span id="LST1E44DE20_1018" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1<span id="LST1E44DE20_1019" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST1E44DE20_1020" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1021" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1022" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1023" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1024" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1025" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, T1, Func<span id="LST1E44DE20_1026" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single, Single, Single, T1, Single<span id="LST1E44DE20_1027" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1028" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1029" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_8.htm">MapIndexed(<span id="LST1E44DE20_1030" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1031" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1032" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double<span id="LST1E44DE20_1033" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1034" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1035" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_9.htm">MapIndexed(<span id="LST1E44DE20_1036" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1037" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1038" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32<span id="LST1E44DE20_1039" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1040" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1041" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_2.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1042" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1043" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1044" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double<span id="LST1E44DE20_1045" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1046" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1047" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_5.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1048" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1049" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1050" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single<span id="LST1E44DE20_1051" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1052" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1053" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_12.htm">MapIndexed(<span id="LST1E44DE20_1054" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1055" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1056" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single<span id="LST1E44DE20_1057" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1058" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1059" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to each element of a vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_7.htm">MapIndexed(<span id="LST1E44DE20_1060" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1061" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1062" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1063" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1064" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double, Double<span id="LST1E44DE20_1065" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1066" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1067" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_10.htm">MapIndexed(<span id="LST1E44DE20_1068" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1069" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1070" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1071" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1072" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32<span id="LST1E44DE20_1073" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1074" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1075" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_1.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1076" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1077" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1078" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1079" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1080" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double, Double<span id="LST1E44DE20_1081" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1082" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1083" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_4.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1084" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1085" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1086" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1087" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1088" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single, Single<span id="LST1E44DE20_1089" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1090" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1091" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_13.htm">MapIndexed(<span id="LST1E44DE20_1092" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1093" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1094" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1095" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1096" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single, Single<span id="LST1E44DE20_1097" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1098" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1099" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of two vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_6.htm">MapIndexed(<span id="LST1E44DE20_1100" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1101" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1102" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1103" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1104" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1105" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1106" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double, Double, Double<span id="LST1E44DE20_1107" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1108" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1109" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_11.htm">MapIndexed(<span id="LST1E44DE20_1110" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1111" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1112" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1113" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1114" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1115" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1116" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, Int32, Int32, Int32<span id="LST1E44DE20_1117" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1118" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1119" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1120" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1121" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1122" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1123" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1124" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1125" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1126" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Double, Double, Double, Double<span id="LST1E44DE20_1127" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1128" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1129" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_3.htm">MapIndexed(IReadOnlyList<span id="LST1E44DE20_1130" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1131" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1132" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1133" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1134" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1135" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LST1E44DE20_1136" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single, Single, Single<span id="LST1E44DE20_1137" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1138" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1139" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MapIndexed_14.htm">MapIndexed(<span id="LST1E44DE20_1140" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1141" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1142" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1143" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1144" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1145" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Func<span id="LST1E44DE20_1146" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Single, Single, Single, Single<span id="LST1E44DE20_1147" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, <span id="LST1E44DE20_1148" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1149" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Elementwise application of a function to corresponding elements of three vectors. The result is stored in another vector or in the same vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_4.htm">Max(<span id="LST1E44DE20_1150" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1151" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_6.htm">Max(<span id="LST1E44DE20_1152" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1153" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max.htm">Max(IReadOnlyList<span id="LST1E44DE20_1154" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1155" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_2.htm">Max(IReadOnlyList<span id="LST1E44DE20_1156" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1157" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_8.htm">Max(<span id="LST1E44DE20_1158" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1159" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_5.htm">Max(<span id="LST1E44DE20_1160" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1161" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_7.htm">Max(<span id="LST1E44DE20_1162" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1163" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_1.htm">Max(IReadOnlyList<span id="LST1E44DE20_1164" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1165" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_3.htm">Max(IReadOnlyList<span id="LST1E44DE20_1166" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1167" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Max_9.htm">Max(<span id="LST1E44DE20_1168" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1169" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the maximum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_4.htm">MaxOf(<span id="LST1E44DE20_1170" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1171" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, <span id="LST1E44DE20_1172" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1173" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_5.htm">MaxOf(<span id="LST1E44DE20_1174" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1175" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1176" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1177" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1178" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1179" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Gives the parallel maximum of vector a and b. The first element of the resulting vector
            is the maximum of the first element of a and the first element of b. The second element of the
            resulting vector is the maximum of the second element of a and the second element of b, and so on.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_6.htm">MaxOf(<span id="LST1E44DE20_1180" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1181" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, <span id="LST1E44DE20_1182" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1183" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_7.htm">MaxOf(<span id="LST1E44DE20_1184" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1185" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1186" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1187" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1188" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1189" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Gives the parallel maximum of vector a and b. The first element of the resulting vector
            is the maximum of the first element of a and the first element of b. The second element of the
            resulting vector is the maximum of the second element of a and the second element of b, and so on.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf.htm">MaxOf(IReadOnlyList<span id="LST1E44DE20_1190" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1191" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1192" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1193" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1194" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1195" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Gives the parallel maximum of vector a and b. The first element of the resulting vector
            is the maximum of the first element of a and the first element of b. The second element of the
            resulting vector is the maximum of the second element of a and the second element of b, and so on.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_1.htm">MaxOf(IReadOnlyList<span id="LST1E44DE20_1196" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1197" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double, IVector<span id="LST1E44DE20_1198" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1199" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_2.htm">MaxOf(IReadOnlyList<span id="LST1E44DE20_1200" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1201" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1202" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1203" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1204" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1205" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Gives the parallel maximum of vector a and b. The first element of the resulting vector
            is the maximum of the first element of a and the first element of b. The second element of the
            resulting vector is the maximum of the second element of a and the second element of b, and so on.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_3.htm">MaxOf(IReadOnlyList<span id="LST1E44DE20_1206" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1207" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single, IVector<span id="LST1E44DE20_1208" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1209" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_8.htm">MaxOf(<span id="LST1E44DE20_1210" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1211" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single, <span id="LST1E44DE20_1212" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1213" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Creates a new vector, whose elements are the maximum of the elements of a given input vector and a given number.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOf_9.htm">MaxOf(<span id="LST1E44DE20_1214" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1215" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1216" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1217" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1218" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1219" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Gives the parallel maximum of vector a and b. The first element of the resulting vector
            is the maximum of the first element of a and the first element of b. The second element of the
            resulting vector is the maximum of the second element of a and the second element of b, and so on.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOfValidElements_2.htm">MaxOfValidElements(<span id="LST1E44DE20_1220" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1221" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the maximum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOfValidElements.htm">MaxOfValidElements(IReadOnlyList<span id="LST1E44DE20_1222" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1223" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the maximum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOfValidElements_1.htm">MaxOfValidElements(IReadOnlyList<span id="LST1E44DE20_1224" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1225" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the maximum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MaxOfValidElements_3.htm">MaxOfValidElements(<span id="LST1E44DE20_1226" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1227" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the maximum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Mean_2.htm">Mean(<span id="LST1E44DE20_1228" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1229" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Mean_3.htm">Mean(<span id="LST1E44DE20_1230" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1231" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Mean.htm">Mean(IReadOnlyList<span id="LST1E44DE20_1232" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1233" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Mean_1.htm">Mean(IReadOnlyList<span id="LST1E44DE20_1234" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1235" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Mean_4.htm">Mean(<span id="LST1E44DE20_1236" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1237" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MeanAndVariance_2.htm">MeanAndVariance(<span id="LST1E44DE20_1238" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1239" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>, as well as the variance (sum of squares of the mean centered values divided by length of the vector).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MeanAndVariance_3.htm">MeanAndVariance(<span id="LST1E44DE20_1240" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1241" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>, as well as the variance (sum of squares of the mean centered values divided by length of the vector).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MeanAndVariance.htm">MeanAndVariance(IReadOnlyList<span id="LST1E44DE20_1242" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1243" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>, as well as the variance (sum of squares of the mean centered values divided by length of the vector).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MeanAndVariance_1.htm">MeanAndVariance(IReadOnlyList<span id="LST1E44DE20_1244" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1245" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>, as well as the variance (sum of squares of the mean centered values divided by length of the vector).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MeanAndVariance_4.htm">MeanAndVariance(<span id="LST1E44DE20_1246" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1247" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the average (=sum/N) of the elements in <span class="parameter">vector</span>, as well as the variance (sum of squares of the mean centered values divided by length of the vector).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_4.htm">Min(<span id="LST1E44DE20_1248" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1249" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_6.htm">Min(<span id="LST1E44DE20_1250" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1251" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min.htm">Min(IReadOnlyList<span id="LST1E44DE20_1252" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1253" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_2.htm">Min(IReadOnlyList<span id="LST1E44DE20_1254" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1255" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_8.htm">Min(<span id="LST1E44DE20_1256" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1257" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_5.htm">Min(<span id="LST1E44DE20_1258" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1259" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_7.htm">Min(<span id="LST1E44DE20_1260" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1261" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_1.htm">Min(IReadOnlyList<span id="LST1E44DE20_1262" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1263" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_3.htm">Min(IReadOnlyList<span id="LST1E44DE20_1264" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1265" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Min_9.htm">Min(<span id="LST1E44DE20_1266" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1267" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Returns the minimum of the elements in <span class="parameter">vector</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MinOfValidElements_2.htm">MinOfValidElements(<span id="LST1E44DE20_1268" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1269" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the minimum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MinOfValidElements.htm">MinOfValidElements(IReadOnlyList<span id="LST1E44DE20_1270" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1271" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the minimum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MinOfValidElements_1.htm">MinOfValidElements(IReadOnlyList<span id="LST1E44DE20_1272" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1273" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the minimum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_MinOfValidElements_3.htm">MinOfValidElements(<span id="LST1E44DE20_1274" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1275" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the minimum value of all the valid elements in x (nonvalid elements, i.e. NaN values are not considered).
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_4.htm">Multiply(<span id="LST1E44DE20_1276" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1277" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double)</a></td><td>
            Multiplies all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_6.htm">Multiply(<span id="LST1E44DE20_1278" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1279" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Multiplies all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply.htm">Multiply(IVector<span id="LST1E44DE20_1280" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1281" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Double)</a></td><td>
            Multiplies all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_1.htm">Multiply(IVector<span id="LST1E44DE20_1282" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1283" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Single)</a></td><td>
            Multiplies all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_8.htm">Multiply(<span id="LST1E44DE20_1284" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1285" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single)</a></td><td>
            Multiplies all vector elements with a constant.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_5.htm">Multiply(<span id="LST1E44DE20_1286" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1287" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1288" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1289" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1290" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1291" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_7.htm">Multiply(<span id="LST1E44DE20_1292" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1293" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1294" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1295" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1296" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1297" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_2.htm">Multiply(IReadOnlyList<span id="LST1E44DE20_1298" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1299" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1300" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1301" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1302" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1303" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_3.htm">Multiply(IReadOnlyList<span id="LST1E44DE20_1304" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1305" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1306" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1307" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IVector<span id="LST1E44DE20_1308" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1309" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Multiply_9.htm">Multiply(<span id="LST1E44DE20_1310" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1311" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1312" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1313" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1314" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1315" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Multiplies (elementwise) two vectors a and b and stores the result in c. All vectors must have the same length.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Rotate_2.htm">Rotate(<span id="LST1E44DE20_1316" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1317" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Shifts the element of this vector by moving them from index i to index i+<span class="code">increment</span>.
            The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Rotate_3.htm">Rotate(<span id="LST1E44DE20_1318" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1319" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Shifts the element of this vector by moving them from index i to index i+<span class="code">increment</span>.
            The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Rotate.htm">Rotate(IVector<span id="LST1E44DE20_1320" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1321" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Shifts the element of this vector by moving them from index i to index i+<span class="code">increment</span>.
            The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Rotate_1.htm">Rotate(IVector<span id="LST1E44DE20_1322" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1323" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Shifts the element of this vector by moving them from index i to index i+<span class="code">increment</span>.
            The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_Rotate_4.htm">Rotate(<span id="LST1E44DE20_1324" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1325" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Shifts the element of this vector by moving them from index i to index i+<span class="code">increment</span>.
            The elements at the end of the vector are wrapped back to the start of the vector. Thus, effectively, the elements of the vector are rotated.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SetValues__1.htm">SetValues<span id="LST1E44DE20_1326" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_1327" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td> </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SumOfSquaredDifferences_2.htm">SumOfSquaredDifferences(<span id="LST1E44DE20_1328" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1329" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1330" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1331" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the sum of squared differences of the elements of xarray and yarray.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SumOfSquaredDifferences_3.htm">SumOfSquaredDifferences(<span id="LST1E44DE20_1332" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1333" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1334" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1335" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the sum of squared differences of the elements of xarray and yarray.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SumOfSquaredDifferences.htm">SumOfSquaredDifferences(IReadOnlyList<span id="LST1E44DE20_1336" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1337" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1338" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1339" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the sum of squared differences of the elements of xarray and yarray.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SumOfSquaredDifferences_1.htm">SumOfSquaredDifferences(IReadOnlyList<span id="LST1E44DE20_1340" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1341" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, IReadOnlyList<span id="LST1E44DE20_1342" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1343" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the sum of squared differences of the elements of xarray and yarray.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_SumOfSquaredDifferences_4.htm">SumOfSquaredDifferences(<span id="LST1E44DE20_1344" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1345" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, <span id="LST1E44DE20_1346" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1347" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Returns the sum of squared differences of the elements of xarray and yarray.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1348" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1349" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Wraps a double[] array to get an  <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_2.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1350" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int16<span id="LST1E44DE20_1351" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Wraps a Int16[] array to get an  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1352" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1353" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_4.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1354" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_1355" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Wraps a Int32[] array to get an  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1356" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1357" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_6.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1358" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>SByte<span id="LST1E44DE20_1359" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Wraps a SByte[] array to get an  <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1360" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1361" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_8.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1362" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1363" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Wraps a float[] array to get an  <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_1.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1364" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1365" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Wraps a double[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_3.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1366" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int16<span id="LST1E44DE20_1367" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Wraps a Int16[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1368" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1369" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_5.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1370" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_1371" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Wraps a Int32[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1372" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1373" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_7.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1374" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>SByte<span id="LST1E44DE20_1375" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Wraps a SByte[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1376" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1377" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToInverseROVector_9.htm">ToInverseROVector(IReadOnlyList<span id="LST1E44DE20_1378" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1379" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32)</a></td><td>
            Wraps a float[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span> with elements = 1 / elements of the original vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector.htm">ToRODoubleVector(<span id="LST1E44DE20_1380" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1381" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a double[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1382" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1383" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_2.htm">ToRODoubleVector(<span id="LST1E44DE20_1384" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1385" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a Int16[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1386" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1387" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_4.htm">ToRODoubleVector(<span id="LST1E44DE20_1388" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1389" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a Int32[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1390" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1391" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_6.htm">ToRODoubleVector(<span id="LST1E44DE20_1392" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1393" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a SByte[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1394" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1395" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_8.htm">ToRODoubleVector(<span id="LST1E44DE20_1396" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1397" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a float[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1398" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1399" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_1.htm">ToRODoubleVector(<span id="LST1E44DE20_1400" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1401" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a double[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1402" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1403" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_3.htm">ToRODoubleVector(<span id="LST1E44DE20_1404" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1405" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a Int16[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1406" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1407" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_5.htm">ToRODoubleVector(<span id="LST1E44DE20_1408" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1409" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a Int32[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1410" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1411" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_7.htm">ToRODoubleVector(<span id="LST1E44DE20_1412" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1413" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a SByte[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1414" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1415" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToRODoubleVector_9.htm">ToRODoubleVector(<span id="LST1E44DE20_1416" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1417" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a float[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1418" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1419" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROSubVector__1.htm">ToROSubVector<span id="LST1E44DE20_1420" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_1421" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates a subvector of the read-only vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_5.htm">ToROVector(<span id="LST1E44DE20_1422" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1423" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a double[] array to get an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_8.htm">ToROVector(<span id="LST1E44DE20_1424" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1425" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a Int16[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1426" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1427" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_11.htm">ToROVector(<span id="LST1E44DE20_1428" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1429" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a Int32[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1430" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1431" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_14.htm">ToROVector(<span id="LST1E44DE20_1432" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1433" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a SByte[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1434" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1435" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_17.htm">ToROVector(<span id="LST1E44DE20_1436" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1437" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps a float[] array to get an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_6.htm">ToROVector(<span id="LST1E44DE20_1438" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1439" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a double[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_9.htm">ToROVector(<span id="LST1E44DE20_1440" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1441" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a Int16[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1442" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1443" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_12.htm">ToROVector(<span id="LST1E44DE20_1444" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1445" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a Int32[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1446" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1447" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_15.htm">ToROVector(<span id="LST1E44DE20_1448" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1449" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a SByte[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1450" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1451" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_18.htm">ToROVector(<span id="LST1E44DE20_1452" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1453" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps a float[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_7.htm">ToROVector(<span id="LST1E44DE20_1454" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1455" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps an array to an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span>. Start and length of the used section of the array are specified in the parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_10.htm">ToROVector(<span id="LST1E44DE20_1456" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1457" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps an array to an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1458" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1459" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>. Start and length of the used section of the array are specified in the parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_13.htm">ToROVector(<span id="LST1E44DE20_1460" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1461" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps an array to an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1462" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1463" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>. Start and length of the used section of the array are specified in the parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector.htm">ToROVector(IReadOnlyList<span id="LST1E44DE20_1464" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1465" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_1.htm">ToROVector(IReadOnlyList<span id="LST1E44DE20_1466" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int16<span id="LST1E44DE20_1467" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_2.htm">ToROVector(IReadOnlyList<span id="LST1E44DE20_1468" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_1469" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_3.htm">ToROVector(IReadOnlyList<span id="LST1E44DE20_1470" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>SByte<span id="LST1E44DE20_1471" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_4.htm">ToROVector(IReadOnlyList<span id="LST1E44DE20_1472" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1473" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_16.htm">ToROVector(<span id="LST1E44DE20_1474" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1475" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps an array to an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1476" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1477" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>. Start and length of the used section of the array are specified in the parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVector_19.htm">ToROVector(<span id="LST1E44DE20_1478" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1479" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps an array to an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span>. Start and length of the used section of the array are specified in the parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1480" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1481" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, Int32, Double, Int32)</a></td><td>
            Wraps a double[] array to get an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_2.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1482" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1483" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int16, Int32, Int16, Int32)</a></td><td>
            Wraps a Int16[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1484" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1485" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_4.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1486" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1487" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32, Int32)</a></td><td>
            Wraps a Int32[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1488" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1489" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_7.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1490" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1491" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SByte, Int32, SByte, Int32)</a></td><td>
            Wraps a SByte[] array to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1492" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1493" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_9.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1494" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1495" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single, Int32, Single, Int32)</a></td><td>
            Wraps a float[] array to get an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_1.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1496" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1497" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Double, Int32, Double, Int32)</a></td><td>
            Wraps a double[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_3.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1498" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1499" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int16, Int32, Int16, Int32)</a></td><td>
            Wraps a Int16[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1500" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1501" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_5.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1502" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1503" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32, Int32, Int32)</a></td><td>
            Wraps a Int32[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1504" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1505" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_6.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1506" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1507" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, SByte, Int32, SByte, Int32)</a></td><td>
            Wraps a SByte[] array till a given length to get an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1508" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1509" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorAmendedShifted_8.htm">ToROVectorAmendedShifted(<span id="LST1E44DE20_1510" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1511" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Single, Int32, Single, Int32)</a></td><td>
            Wraps a float[] array till a given length to get an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1512" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1513" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Double, Double)</a></td><td>
            Wraps a double[] array to get a struct with an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above Length, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_2.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1514" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1515" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int16, Int16)</a></td><td>
            Wraps a Int16[] array to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1516" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1517" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above Length, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_4.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1518" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1519" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a Int32[] array to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1520" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1521" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above Length, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_7.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1522" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1523" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, SByte, SByte)</a></td><td>
            Wraps a SByte[] array to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1524" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1525" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above Length, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_9.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1526" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1527" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Single, Single)</a></td><td>
            Wraps a float[] array to get a struct with an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above Length, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_1.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1528" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1529" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Double, Double)</a></td><td>
            Wraps a double[] array till a given length to get a struct with an <span class="noLink">[!:IReadOnlyList&lt;double&gt;]</span> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above <span class="parameter">usedlength</span>, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_3.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1530" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1531" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int16, Int16)</a></td><td>
            Wraps a Int16[] array till a given length to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1532" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1533" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above <span class="parameter">usedlength</span>, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_5.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1534" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1535" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32)</a></td><td>
            Wraps a Int32[] array till a given length to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1536" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1537" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above <span class="parameter">usedlength</span>, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_6.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1538" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1539" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, SByte, SByte)</a></td><td>
            Wraps a SByte[] array till a given length to get a struct with an <a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1" target="_blank" rel="noopener noreferrer">IReadOnlyList<span id="LST1E44DE20_1540" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1541" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above <span class="parameter">usedlength</span>, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToROVectorStructAmendedUnshifted_8.htm">ToROVectorStructAmendedUnshifted(<span id="LST1E44DE20_1542" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1543" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Single, Single)</a></td><td>
            Wraps a float[] array till a given length to get a struct with an <span class="noLink">[!:IReadOnlyList&lt;float&gt;]</span> implementation. The wrapping is done lazily, i.e. you can access elements with indices below zero and
            above <span class="parameter">usedlength</span>, which is normally forbidden. The values for that are given as parameters.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToSubVector__1.htm">ToSubVector<span id="LST1E44DE20_1544" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST1E44DE20_1545" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates a subvector of the read/write vector. Note that is is only a wrapper around the wrapper. If the subvector is changed, also the underlying (wrapped) vector is changed!
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_5.htm">ToVector(<span id="LST1E44DE20_1546" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1547" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps an array to get an <span class="noLink">[!:IVector&lt;double&gt;]</span></td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_8.htm">ToVector(<span id="LST1E44DE20_1548" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1549" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1550" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1551" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_11.htm">ToVector(<span id="LST1E44DE20_1552" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1553" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1554" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1555" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_14.htm">ToVector(<span id="LST1E44DE20_1556" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1557" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1558" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1559" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_17.htm">ToVector(<span id="LST1E44DE20_1560" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1561" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Wraps an array to get an <span class="noLink">[!:IVector&lt;float&gt;]</span></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_6.htm">ToVector(<span id="LST1E44DE20_1562" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1563" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps an array to get an <span class="noLink">[!:IVector&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_9.htm">ToVector(<span id="LST1E44DE20_1564" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1565" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1566" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1567" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_12.htm">ToVector(<span id="LST1E44DE20_1568" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1569" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1570" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1571" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_15.htm">ToVector(<span id="LST1E44DE20_1572" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1573" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps an array to get an <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1574" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1575" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_18.htm">ToVector(<span id="LST1E44DE20_1576" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1577" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32)</a></td><td>
            Wraps an array to get an <span class="noLink">[!:IVector&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_7.htm">ToVector(<span id="LST1E44DE20_1578" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1579" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an array to get a <span class="noLink">[!:IVector&lt;double&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_10.htm">ToVector(<span id="LST1E44DE20_1580" data-languageSpecificText="cpp=array&lt;"></span>Int16<span id="LST1E44DE20_1581" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an array to get a <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1582" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1583" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_13.htm">ToVector(<span id="LST1E44DE20_1584" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1585" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an array to get a <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1586" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1587" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector.htm">ToVector(IVector<span id="LST1E44DE20_1588" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1589" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_1.htm">ToVector(IVector<span id="LST1E44DE20_1590" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int16<span id="LST1E44DE20_1591" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_2.htm">ToVector(IVector<span id="LST1E44DE20_1592" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST1E44DE20_1593" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_3.htm">ToVector(IVector<span id="LST1E44DE20_1594" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>SByte<span id="LST1E44DE20_1595" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_4.htm">ToVector(IVector<span id="LST1E44DE20_1596" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1597" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an original vector into a new vector.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_16.htm">ToVector(<span id="LST1E44DE20_1598" data-languageSpecificText="cpp=array&lt;"></span>SByte<span id="LST1E44DE20_1599" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an array to get a <a href="T_Altaxo_Calc_LinearAlgebra_IVector_1.htm">IVector<span id="LST1E44DE20_1600" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST1E44DE20_1601" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToVector_19.htm">ToVector(<span id="LST1E44DE20_1602" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1603" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32)</a></td><td>
            Wraps a section of an array to get a <span class="noLink">[!:IVector&lt;float&gt;]</span>.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMean_2.htm">ToZeroMean(<span id="LST1E44DE20_1604" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1605" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMean_3.htm">ToZeroMean(<span id="LST1E44DE20_1606" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1607" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMean.htm">ToZeroMean(IVector<span id="LST1E44DE20_1608" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1609" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMean_1.htm">ToZeroMean(IVector<span id="LST1E44DE20_1610" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1611" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMean_4.htm">ToZeroMean(<span id="LST1E44DE20_1612" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1613" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMeanAndUnitVariance_2.htm">ToZeroMeanAndUnitVariance(<span id="LST1E44DE20_1614" data-languageSpecificText="cpp=array&lt;"></span>Double<span id="LST1E44DE20_1615" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMeanAndUnitVariance_3.htm">ToZeroMeanAndUnitVariance(<span id="LST1E44DE20_1616" data-languageSpecificText="cpp=array&lt;"></span>Int32<span id="LST1E44DE20_1617" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMeanAndUnitVariance.htm">ToZeroMeanAndUnitVariance(IVector<span id="LST1E44DE20_1618" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Double<span id="LST1E44DE20_1619" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMeanAndUnitVariance_1.htm">ToZeroMeanAndUnitVariance(IVector<span id="LST1E44DE20_1620" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Single<span id="LST1E44DE20_1621" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr><tr><td><img src="../icons/pubExtension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_VectorMath_ToZeroMeanAndUnitVariance_4.htm">ToZeroMeanAndUnitVariance(<span id="LST1E44DE20_1622" data-languageSpecificText="cpp=array&lt;"></span>Single<span id="LST1E44DE20_1623" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Normalizes the vector elements so that the mean of the elements is zero.
            </td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_Altaxo_Calc_LinearAlgebra.htm">Altaxo.Calc.LinearAlgebra Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Altaxo can be downloaded from <a href="https://sourceforge.net/projects/altaxo/files/Altaxo/">SourceForge</a>. Source code available on <a href="https://github.com/Altaxo/Altaxo">Github</a>.
<br /><a href="https://sourceforge.net/u/dlellinger/profile/">(C) Dr. Dirk Lellinger and all contributors to the source code 2002 - <script>document.write(new Date().getFullYear()); </script></a><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dlellinger%40users.sourceforge.net?Subject=Altaxo%20user%20manual%20and%20class%20reference">dlellinger@users.sourceforge.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>