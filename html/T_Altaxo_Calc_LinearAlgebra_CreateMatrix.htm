<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>CreateMatrix Class</title><meta name="Title" content="CreateMatrix Class" /><meta name="Microsoft.Help.Id" content="T:Altaxo.Calc.LinearAlgebra.CreateMatrix" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Altaxo.Calc.LinearAlgebra.CreateMatrix class" /><meta name="System.Keywords" content="CreateMatrix class" /><meta name="Microsoft.Help.F1" content="Altaxo.Calc.LinearAlgebra.CreateMatrix" /><meta name="Microsoft.Help.F1" content="CreateMatrix" /><meta name="container" content="Altaxo.Calc.LinearAlgebra" /><meta name="file" content="T_Altaxo_Calc_LinearAlgebra_CreateMatrix" /><meta name="guid" content="T_Altaxo_Calc_LinearAlgebra_CreateMatrix" /><meta name="Description" content="summaryT:Altaxo.Calc.LinearAlgebra." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Altaxo user manual and class reference<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1B7FE024E7E614BFA13DAA1FD005CB2E.htm" title="Altaxo user manual and class reference" tocid="roottoc">Altaxo user manual and class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="Altaxo class reference" tocid="R_Project_Documentation">Altaxo class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo.htm" title="Altaxo Namespaces" tocid="G_Altaxo">Altaxo Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo_Calc.htm" title="Altaxo.Calc Namespaces" tocid="G_Altaxo_Calc">Altaxo.Calc Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Altaxo_Calc_LinearAlgebra.htm" title="Altaxo.Calc.LinearAlgebra" tocid="N_Altaxo_Calc_LinearAlgebra">Altaxo.Calc.LinearAlgebra</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Altaxo_Calc_LinearAlgebra_CreateMatrix.htm" title="CreateMatrix Class" tocid="T_Altaxo_Calc_LinearAlgebra_CreateMatrix">CreateMatrix Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Altaxo_Calc_LinearAlgebra_CreateMatrix.htm" title="CreateMatrix Methods" tocid="Methods_T_Altaxo_Calc_LinearAlgebra_CreateMatrix">CreateMatrix Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Create<wbr />Matrix Class</h1></td></tr></table><div class="summary"><p class="missing">[Missing &lt;summary&gt; documentation for "T:Altaxo.Calc.LinearAlgebra.CreateMatrix"]</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST29CCB039_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <span class="selflink">Altaxo.Calc.LinearAlgebra<span id="LST29CCB039_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>CreateMatrix</span><br /></div><br /><strong>Namespace:</strong> <a href="N_Altaxo_Calc_LinearAlgebra.htm">Altaxo.Calc.LinearAlgebra</a><br /><strong>Assembly:</strong> AltaxoCore (in AltaxoCore.dll) Version: 4.8.3179.0 (4.8.3179.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">CreateMatrix</span></pre></div></div></div></div><p>The <span class="selflink">CreateMatrix</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDEA')" onkeypress="SectionExpandCollapse_CheckKey('IDDEA', event)" tabindex="0"><img id="IDDEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDDEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Dense__1.htm">Dense<span id="LST29CCB039_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(DenseColumnMajorMatrixStorage<span id="LST29CCB039_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Dense__1_1.htm">Dense<span id="LST29CCB039_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Dense__1_3.htm">Dense<span id="LST29CCB039_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, T)</a></td><td>
            Create a new dense matrix and initialize each value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Dense__1_4.htm">Dense<span id="LST29CCB039_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, <span id="LST29CCB039_12" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Dense__1_2.htm">Dense<span id="LST29CCB039_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Func<span id="LST29CCB039_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix and initialize each value using the provided init function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseDiagonal__1_2.htm">DenseDiagonal<span id="LST29CCB039_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, T)</a></td><td>
            Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseDiagonal__1_1.htm">DenseDiagonal<span id="LST29CCB039_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, T)</a></td><td>
            Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseDiagonal__1.htm">DenseDiagonal<span id="LST29CCB039_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Func<span id="LST29CCB039_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST29CCB039_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseIdentity__1.htm">DenseIdentity<span id="LST29CCB039_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32)</a></td><td>
            Create a new diagonal dense identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseIdentity__1_1.htm">DenseIdentity<span id="LST29CCB039_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new diagonal dense identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfArray__1.htm">DenseOfArray<span id="LST29CCB039_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumnArrays__1_1.htm">DenseOfColumnArrays<span id="LST29CCB039_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_34" data-languageSpecificText="cpp=array&lt;"></span><span id="LST29CCB039_35" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_36" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_37" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix of T as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumnArrays__1.htm">DenseOfColumnArrays<span id="LST29CCB039_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST29CCB039_41" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_42" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix of T as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumnMajor__1.htm">DenseOfColumnMajor<span id="LST29CCB039_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumns__1.htm">DenseOfColumns<span id="LST29CCB039_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_48" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_49" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_50" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_51" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumns__1_1.htm">DenseOfColumns<span id="LST29CCB039_52" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_55" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_56" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumnVectors__1_1.htm">DenseOfColumnVectors<span id="LST29CCB039_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_59" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_60" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Vector<span id="LST29CCB039_61" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_62" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_63" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfColumnVectors__1.htm">DenseOfColumnVectors<span id="LST29CCB039_64" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_66" data-languageSpecificText="cpp=array&lt;"></span>Vector<span id="LST29CCB039_67" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_68" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_69" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfDiagonalArray__1_1.htm">DenseOfDiagonalArray<span id="LST29CCB039_70" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_71" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_72" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_73" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfDiagonalArray__1.htm">DenseOfDiagonalArray<span id="LST29CCB039_74" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_75" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, <span id="LST29CCB039_76" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_77" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfDiagonalVector__1.htm">DenseOfDiagonalVector<span id="LST29CCB039_78" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_79" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Vector<span id="LST29CCB039_80" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_81" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfDiagonalVector__1_1.htm">DenseOfDiagonalVector<span id="LST29CCB039_82" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_83" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Vector<span id="LST29CCB039_84" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_85" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfIndexed__1.htm">DenseOfIndexed<span id="LST29CCB039_86" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_87" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Tuple<span id="LST29CCB039_89" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_90" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_91" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfIndexed__1_1.htm">DenseOfIndexed<span id="LST29CCB039_92" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_93" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_94" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>ValueTuple<span id="LST29CCB039_95" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_96" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_97" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfMatrix__1.htm">DenseOfMatrix<span id="LST29CCB039_98" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_99" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfMatrixArray__1.htm">DenseOfMatrixArray<span id="LST29CCB039_100" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_101" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new dense matrix from a 2D array of existing matrices.
            The matrices in the array are not required to be dense already.
            If the matrices do not align properly, they are placed on the top left
            corner of their cell with the remaining fields left zero.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRowArrays__1_1.htm">DenseOfRowArrays<span id="LST29CCB039_102" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_103" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_104" data-languageSpecificText="cpp=array&lt;"></span><span id="LST29CCB039_105" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_106" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_107" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix of T as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRowArrays__1.htm">DenseOfRowArrays<span id="LST29CCB039_108" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_109" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_110" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST29CCB039_111" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_112" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_113" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix of T as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRows__1.htm">DenseOfRows<span id="LST29CCB039_114" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_115" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_116" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_117" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_118" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_119" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRows__1_1.htm">DenseOfRows<span id="LST29CCB039_120" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_121" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_122" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_123" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_124" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_125" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRowVectors__1_1.htm">DenseOfRowVectors<span id="LST29CCB039_126" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_127" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_128" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Vector<span id="LST29CCB039_129" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_130" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_131" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DenseOfRowVectors__1.htm">DenseOfRowVectors<span id="LST29CCB039_132" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_133" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_134" data-languageSpecificText="cpp=array&lt;"></span>Vector<span id="LST29CCB039_135" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_136" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_137" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1_5.htm">Diagonal<span id="LST29CCB039_138" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_139" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_140" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_141" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new square diagonal matrix directly binding to a raw array.
            The array is assumed to represent the diagonal values and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1.htm">Diagonal<span id="LST29CCB039_142" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_143" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(DiagonalMatrixStorage<span id="LST29CCB039_144" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_145" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1_1.htm">Diagonal<span id="LST29CCB039_146" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_147" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1_3.htm">Diagonal<span id="LST29CCB039_148" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_149" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, T)</a></td><td>
            Create a new diagonal matrix and initialize each diagonal value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1_4.htm">Diagonal<span id="LST29CCB039_150" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_151" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, <span id="LST29CCB039_152" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_153" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to represent the diagonal values and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Diagonal__1_2.htm">Diagonal<span id="LST29CCB039_154" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_155" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Func<span id="LST29CCB039_156" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST29CCB039_157" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalIdentity__1.htm">DiagonalIdentity<span id="LST29CCB039_158" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_159" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32)</a></td><td>
            Create a new diagonal identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalIdentity__1_1.htm">DiagonalIdentity<span id="LST29CCB039_160" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_161" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new diagonal identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalOfDiagonalArray__1_1.htm">DiagonalOfDiagonalArray<span id="LST29CCB039_162" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_163" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_164" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_165" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new diagonal matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalOfDiagonalArray__1.htm">DiagonalOfDiagonalArray<span id="LST29CCB039_166" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_167" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, <span id="LST29CCB039_168" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_169" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new diagonal matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalOfDiagonalVector__1.htm">DiagonalOfDiagonalVector<span id="LST29CCB039_170" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_171" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Vector<span id="LST29CCB039_172" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_173" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_DiagonalOfDiagonalVector__1_1.htm">DiagonalOfDiagonalVector<span id="LST29CCB039_174" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_175" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Vector<span id="LST29CCB039_176" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_177" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Random__1.htm">Random<span id="LST29CCB039_178" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_179" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new dense matrix with values sampled from the standard distribution with a system random source.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Random__1_1.htm">Random<span id="LST29CCB039_180" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_181" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IContinuousDistribution)</a></td><td>
            Create a new dense matrix with values sampled from the provided random distribution.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Random__1_2.htm">Random<span id="LST29CCB039_182" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_183" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Int32)</a></td><td>
            Create a new dense matrix with values sampled from the standard distribution with a system random source.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_RandomPositiveDefinite__1.htm">RandomPositiveDefinite<span id="LST29CCB039_184" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_185" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32)</a></td><td>
            Create a new positive definite dense matrix where each value is the product
            of two samples from the standard distribution.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_RandomPositiveDefinite__1_1.htm">RandomPositiveDefinite<span id="LST29CCB039_186" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_187" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, IContinuousDistribution)</a></td><td>
            Create a new positive definite dense matrix where each value is the product
            of two samples from the provided random distribution.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_RandomPositiveDefinite__1_2.htm">RandomPositiveDefinite<span id="LST29CCB039_188" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_189" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new positive definite dense matrix where each value is the product
            of two samples from the provided random distribution.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SameAs__1.htm">SameAs<span id="LST29CCB039_190" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_191" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Matrix<span id="LST29CCB039_192" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_193" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Matrix<span id="LST29CCB039_194" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_195" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new matrix with a type that can represent and is closest to both provided samples and the dimensions of example.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SameAs__1_2.htm">SameAs<span id="LST29CCB039_196" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_197" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Vector<span id="LST29CCB039_198" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_199" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32)</a></td><td>
            Create a new matrix with the same kind of the provided example.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SameAs__1_1.htm">SameAs<span id="LST29CCB039_200" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_201" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Matrix<span id="LST29CCB039_202" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_203" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Matrix<span id="LST29CCB039_204" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_205" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32, Boolean)</a></td><td>
            Create a new matrix with a type that can represent and is closest to both provided samples.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SameAs__2.htm">SameAs<span id="LST29CCB039_206" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TU<span id="LST29CCB039_207" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Matrix<span id="LST29CCB039_208" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TU<span id="LST29CCB039_209" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new matrix with the same kind and dimensions of the provided example.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SameAs__2_1.htm">SameAs<span id="LST29CCB039_210" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TU<span id="LST29CCB039_211" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Matrix<span id="LST29CCB039_212" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TU<span id="LST29CCB039_213" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Int32, Int32, Boolean)</a></td><td>
            Create a new matrix with the same kind of the provided example.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Sparse__1.htm">Sparse<span id="LST29CCB039_214" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_215" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(SparseCompressedRowMatrixStorage<span id="LST29CCB039_216" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_217" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Sparse__1_1.htm">Sparse<span id="LST29CCB039_218" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_219" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a sparse matrix of T with the given number of rows and columns.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Sparse__1_3.htm">Sparse<span id="LST29CCB039_220" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_221" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, T)</a></td><td>
            Create a new sparse matrix and initialize each value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_Sparse__1_2.htm">Sparse<span id="LST29CCB039_222" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_223" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Func<span id="LST29CCB039_224" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_225" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix and initialize each value using the provided init function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseDiagonal__1_2.htm">SparseDiagonal<span id="LST29CCB039_226" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_227" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, T)</a></td><td>
            Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseDiagonal__1_1.htm">SparseDiagonal<span id="LST29CCB039_228" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_229" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, T)</a></td><td>
            Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseDiagonal__1.htm">SparseDiagonal<span id="LST29CCB039_230" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_231" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Func<span id="LST29CCB039_232" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST29CCB039_233" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseFromCompressedSparseColumnFormat__1.htm">SparseFromCompressedSparseColumnFormat<span id="LST29CCB039_234" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_235" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix from a compressed sparse column format.
            This new matrix will be independent from the given arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseFromCompressedSparseRowFormat__1.htm">SparseFromCompressedSparseRowFormat<span id="LST29CCB039_236" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_237" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix from a compressed sparse row format.
            This new matrix will be independent from the given arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseFromCoordinateFormat__1.htm">SparseFromCoordinateFormat<span id="LST29CCB039_238" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_239" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix from a coordinate format.
            This new matrix will be independent from the given arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseIdentity__1.htm">SparseIdentity<span id="LST29CCB039_240" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_241" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32)</a></td><td>
            Create a new diagonal dense identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseIdentity__1_1.htm">SparseIdentity<span id="LST29CCB039_242" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_243" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32)</a></td><td>
            Create a new diagonal dense identity matrix with a one-diagonal.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfArray__1.htm">SparseOfArray<span id="LST29CCB039_244" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_245" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumnArrays__1.htm">SparseOfColumnArrays<span id="LST29CCB039_246" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_247" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_248" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST29CCB039_249" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_250" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_251" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumnArrays__1_1.htm">SparseOfColumnArrays<span id="LST29CCB039_252" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_253" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_254" data-languageSpecificText="cpp=array&lt;"></span><span id="LST29CCB039_255" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_256" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_257" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumnMajor__1.htm">SparseOfColumnMajor<span id="LST29CCB039_258" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_259" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumns__1.htm">SparseOfColumns<span id="LST29CCB039_260" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_261" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_262" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_263" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_264" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_265" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumns__1_1.htm">SparseOfColumns<span id="LST29CCB039_266" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_267" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_268" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_269" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_270" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_271" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumnVectors__1_1.htm">SparseOfColumnVectors<span id="LST29CCB039_272" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_273" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_274" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Vector<span id="LST29CCB039_275" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_276" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_277" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfColumnVectors__1.htm">SparseOfColumnVectors<span id="LST29CCB039_278" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_279" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_280" data-languageSpecificText="cpp=array&lt;"></span>Vector<span id="LST29CCB039_281" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_282" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_283" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfDiagonalArray__1_1.htm">SparseOfDiagonalArray<span id="LST29CCB039_284" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_285" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_286" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_287" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfDiagonalArray__1.htm">SparseOfDiagonalArray<span id="LST29CCB039_288" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_289" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, <span id="LST29CCB039_290" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_291" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfDiagonalVector__1.htm">SparseOfDiagonalVector<span id="LST29CCB039_292" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_293" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Vector<span id="LST29CCB039_294" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_295" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfDiagonalVector__1_1.htm">SparseOfDiagonalVector<span id="LST29CCB039_296" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_297" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, Vector<span id="LST29CCB039_298" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_299" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfIndexed__1.htm">SparseOfIndexed<span id="LST29CCB039_300" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_301" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_302" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Tuple<span id="LST29CCB039_303" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_304" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_305" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfIndexed__1_1.htm">SparseOfIndexed<span id="LST29CCB039_306" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_307" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_308" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>ValueTuple<span id="LST29CCB039_309" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, Int32, T<span id="LST29CCB039_310" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_311" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfMatrix__1.htm">SparseOfMatrix<span id="LST29CCB039_312" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_313" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfMatrixArray__1.htm">SparseOfMatrixArray<span id="LST29CCB039_314" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_315" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix from a 2D array of existing matrices.
            The matrices in the array are not required to be sparse already.
            If the matrices do not align properly, they are placed on the top left
            corner of their cell with the remaining fields left zero.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRowArrays__1.htm">SparseOfRowArrays<span id="LST29CCB039_316" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_317" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_318" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span><span id="LST29CCB039_319" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_320" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_321" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRowArrays__1_1.htm">SparseOfRowArrays<span id="LST29CCB039_322" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_323" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_324" data-languageSpecificText="cpp=array&lt;"></span><span id="LST29CCB039_325" data-languageSpecificText="cpp=array&lt;"></span>T<span id="LST29CCB039_326" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span><span id="LST29CCB039_327" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRowMajor__1.htm">SparseOfRowMajor<span id="LST29CCB039_328" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_329" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRows__1.htm">SparseOfRows<span id="LST29CCB039_330" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_331" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_332" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_333" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_334" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_335" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRows__1_1.htm">SparseOfRows<span id="LST29CCB039_336" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_337" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Int32, Int32, IEnumerable<span id="LST29CCB039_338" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST29CCB039_339" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_340" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_341" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRowVectors__1_1.htm">SparseOfRowVectors<span id="LST29CCB039_342" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_343" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LST29CCB039_344" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Vector<span id="LST29CCB039_345" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_346" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_347" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_SparseOfRowVectors__1.htm">SparseOfRowVectors<span id="LST29CCB039_348" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_349" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(<span id="LST29CCB039_350" data-languageSpecificText="cpp=array&lt;"></span>Vector<span id="LST29CCB039_351" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_352" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST29CCB039_353" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_LinearAlgebra_CreateMatrix_WithStorage__1.htm">WithStorage<span id="LST29CCB039_354" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LST29CCB039_355" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Create a new matrix straight from an initialized matrix storage instance.
            If you have an instance of a discrete storage type instead, use their direct methods instead.
            </td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_Altaxo_Calc_LinearAlgebra.htm">Altaxo.Calc.LinearAlgebra Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Altaxo can be downloaded from <a href="https://sourceforge.net/projects/altaxo/files/Altaxo/">SourceForge</a>. Source code available on <a href="https://github.com/Altaxo/Altaxo">Github</a>.
<br /><a href="https://sourceforge.net/u/dlellinger/profile/">(C) Dr. Dirk Lellinger and all contributors to the source code 2002 - <script>document.write(new Date().getFullYear()); </script></a><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dlellinger%40users.sourceforge.net?Subject=Altaxo%20user%20manual%20and%20class%20reference">dlellinger@users.sourceforge.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>