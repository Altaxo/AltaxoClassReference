<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Worksheet Scripts and Column Scripts</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="51AB2CB3ECBAFD1DD0F029C0B45B8046" /><meta name="Description" content="Previous section: Worksheet Notes" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Altaxo user manual and class reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\1B7FE024E7E614BFA13DAA1FD005CB2E.htm" title="Altaxo user manual and class reference" tocid="roottoc">Altaxo user manual and class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1B7FE024E7E614BFA13DAA1FD005CB2E.htm" title="Altaxo user manual" tocid="1B7FE024E7E614BFA13DAA1FD005CB2E">Altaxo user manual</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/345E05B54F4611736070E46B38DD4CB5.htm" title="Tables and Worksheets" tocid="345E05B54F4611736070E46B38DD4CB5">Tables and Worksheets</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/5C8543F24C7EE1C52CD7211AC31DB592.htm" title="Data columns and property columns" tocid="5C8543F24C7EE1C52CD7211AC31DB592">Data columns and property columns</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/AA57528103751EB21A179BF18C6C5F58.htm" title="Column headers" tocid="AA57528103751EB21A179BF18C6C5F58">Column headers</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/6FAC01304D7EC3D8AE1C724CA084256B.htm" title="Creating a new worksheet" tocid="6FAC01304D7EC3D8AE1C724CA084256B">Creating a new worksheet</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0F56118543F36CC6A6EB223F48A5B2C2.htm" title="Creating additional data columns or property columns" tocid="0F56118543F36CC6A6EB223F48A5B2C2">Creating additional data columns or property columns</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/9EC02FDB23AEF02047503483B7079F28.htm" title="Selection of columns and/or rows in a worksheet" tocid="9EC02FDB23AEF02047503483B7079F28">Selection of columns and/or rows in a worksheet</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/F71D3901373F20479F4C3575F2838494.htm" title="Copy/paste of worksheet data" tocid="F71D3901373F20479F4C3575F2838494">Copy/paste of worksheet data</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/CCE945B2EC2C578D8C49120D55FACEE3.htm" title="Importing ASCII data" tocid="CCE945B2EC2C578D8C49120D55FACEE3">Importing ASCII data</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/B09D5D470B8DCF524A698117E51D308B.htm" title="Changing the structure of a worksheet" tocid="B09D5D470B8DCF524A698117E51D308B">Changing the structure of a worksheet</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/742EC350D96B6D65DA918DE77373E534.htm" title="Worksheet Notes" tocid="742EC350D96B6D65DA918DE77373E534">Worksheet Notes</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/51AB2CB3ECBAFD1DD0F029C0B45B8046.htm" title="Worksheet Scripts and Column Scripts" tocid="51AB2CB3ECBAFD1DD0F029C0B45B8046">Worksheet Scripts and Column Scripts</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Worksheet Scripts and Column Scripts</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
Previous section: <a href="742EC350D96B6D65DA918DE77373E534.htm">Worksheet Notes</a></p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#A922639CFDCBCB105FEDED63C79330AA">The script dialog box
</a></li><li class="outlineSectionEntry"><a href="#9FC35E359A7716A00086ED0EDC2BFB10">Worksheet scripts
</a></li></ul><hr /><p>
Scripts can be used to transform data or to calculate new data. Beside
this, they are very useful for all kind of automation purposes. The
scripting language that is supported so far in Altaxo is C# (CSharp).
If you are new to C#, you should read a tutorial about C#. However,
for simple calculations, you should be just fine going to the script
examples.
</p><p>
For a given table, you can have one <strong>worksheet script</strong>, which is
intended for calculations concerning all (or most) of the table’s data.
</p><p>
For calculations that affect only one column, you can use a <strong>column
script</strong>. For every column in a table, you can have a separate column
script.
</p><p>
These are only some hints when to use a worksheet script and when to use
a column script. Beside this, there is not much difference between the
two. Both have access to all data in the table (read/write).
</p><p>
Personally, I find it often easier to maintain a worksheet script
instead of multiple column scripts, because you have to look only in one
place. Additionally, worksheet scripts can be called easily from other
worksheet scripts. Thus, for tasks that have to be repeated for multiple
worksheets, you can create a worksheet script in an empty worksheet, and
then call this script from the worksheet scripts of the other tables. If
you need to change the worksheet script, you then need to change it only
in one place, namely in the worksheet script of the empty table.
</p></div><div class="collapsibleAreaRegion" id="A922639CFDCBCB105FEDED63C79330AA"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The script dialog box
</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
As an example we will have a look at the dialog box for a worksheet
script. To create a worksheet script for the currently active worksheet,
select Worksheet→Worksheet script from the main menu. A dialog opens
(see figure below):
</p><p><span class="media"><img alt="C7EE85F52EF7ACA57E05F9359406F186" src="../media/C7EE85F52EF7ACA57E05F9359406F186.png" /></span></p><p>
As you can see, there is already some text typed into the script window.
Usually, you change the script text between the two comment lines
(green). But sometimes it is also necessary to change the code above the
first comment line. In the figure above, this text is collapsed. To show
the text, click on the ‘+’ button in the first line. After this, the
text looks like this:
</p><p><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#9DBC4443FE85CC10055F2B6D9338D965"><img src="../media/9DBC4443FE85CC10055F2B6D9338D965.png" width="567" /></a></p><p>
Please change this text only when you already have some experience with
C#. To collapse the script header again, click on the ‘-’ button in the
first line.
</p><p>
Assume you have written something (I’ll come to some examples later),
you will have four choices:
</p><ul><li><p>
Pressing the ‘<strong>OK</strong>’ button gets the script compiled and
then executed. The dialog box will be closed before execution of
the script. If your script runs longer than approx. 10 sec, another
dialog box will pop open, in which you should be able to cancel the
execution of the script.
</p></li><li><p>
Pressing the ‘<strong>Compile</strong>’ button will compile the script (the
script is not executed). The dialog box remains open. This is useful
if you just want to see if your script can be compiled. A success
message is then shown in the lower part of the dialog. If
compilation was not successful, you can click on the
error message(s) in the message window, which brings the cursor to
the position where the error was detected.
</p></li><li><p>
Pressing the ‘<strong>Update</strong>’ button closes the dialog box without
compiling and execution the script, but the script is updated (saved
as part of the worksheet). You can use this button if your script
currently doesn’t compile, but you want to save the changed you made
so far.
</p></li><li><p>
Pressing the ‘<strong>Cancel</strong>’ button closes the dialog without compiling
and execution. The changes will not be saved, thus all changes you
have made so far will be lost.
</p></li></ul></div><div class="collapsibleAreaRegion" id="9FC35E359A7716A00086ED0EDC2BFB10"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Worksheet scripts
</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
The worksheet scripts of the current worksheet is opened by choosing
Worksheet→Worksheet script from the main menu. A dialog box
described before opens.
</p><p>
When you expand the ScriptHeader of the worksheet script, you will see
the following code:
</p><p><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#9DBC4443FE85CC10055F2B6D9338D965"><img src="../media/9DBC4443FE85CC10055F2B6D9338D965.png" width="567" /></a></p><p>
Users with some skills in C# know that lines 2-7 are using statements,
bringing some namespaces into easy access. You can add additional
namespaces here. Unskilled users should leave those lines alone.
</p><p>
Interesting lines are line 13, 15, 16, and 17. They show, which local
variables you can use for accessing your table:
</p><ul><li><p>
‘mytable’ (line 13) : the data table for which this script
is executed. Usually, this is the worksheet with which this script
is associated; but if you call this script from other worksheet
scripts, it is usually the table of the calling worksheet script.
</p></li><li><p>
‘reporter’ (line13): a variable used for long-running scripts to
report the progress of the script execution. If your script runs
shortly (less than some seconds), you can safely ignore
this variable. You can even ignore it for long-running scripts, but
then you will have no clue about the progress your script is making.
</p></li><li><p>
‘col’ (line 15): is the collection of data columns of the table
‘mytable’
</p></li><li><p>
‘pcol’ (line 16): is the collection of property columns of the table
‘mytable’
</p></li><li><p>
‘table’ (line 17): is the collection of all tables in the current
project
</p></li></ul><p>
As you can see from the above list, you not only have access to your
‘own’ table, but to all tables in the project (via variable ‘table’)! In
fact, by the static variable ‘Current’ (which is permanent in all
scripts, but is not shown in the figure above), you have access to all
data of your current project plus all classes of Altaxo itself. Thus you
are able to write very powerful scripts, or on the other hand, you can
mess everything up. It’s up to you!
</p><p>
I’ve almost forgotten one very very useful feature: the code completion
support! When you begin to type, you will see a dialog box with
suggestions, applicable for the current context. In the figure below, I
typed in ‘col.’. This popup appears after I typed in the dot:
</p><p><a href="ACAC6A80-7CE0-4CB9-B36C-B2FB6ACAB027.htm#48AF9DC1A40E495A8934BEC23FA2EEC8"><img src="../media/48AF9DC1A40E495A8934BEC23FA2EEC8.png" width="567" /></a></p><p>
Here, you can see all the methods and properties of the ‘col’ variable
(remember that ‘col’ was the collection of data columns of the table
‘mytable’). Here, I selected the add method, and in the explanation
balloon to the right of the popup it is said that the Add methods has 4
overloads (i.e. there are in fact four different Add methods, each one
with a different parameter set), and that the first overload simply
takes a DataColumn as argument. Is also explains what the Add method is
doing. If you want to use the ‘Add’ method, simply press the Tab key,
and Add will be included in your script. In this way, you can write
scripts even with long method names in short time. If you don’t want to
use the ‘Add’ method, just press the first char of your method name of
choice, and the dialog box will show only those methods, whose name
starts with the character you typed in.
</p><p>
But let’s see some examples. If not stated otherwise, all examples refer
to the script text between the lines
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// ----- add your script below this line -----</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADACAAA");</script><p>
and
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// ----- add your script above this line -----</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABACAAA");</script><h4 class="subHeading" id="E670E9245379E806CA0CAE0411238701">Example 1: Fill a column with calculated values
</h4><div class="subsection"><p>
In this example we want to have a data column, in which each value is
the square of the row number.
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAOAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAOAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAOAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    <span class="highlight-keyword">for</span>(<span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>;i&lt;<span class="highlight-number">10</span>;i++)
        {
        col[<span class="highlight-literal">"A"</span>][i] = i*i;
        }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAOAAAACAAA");</script><p>
In the first line a new integer variable ‘i’ is created, which starts at
0 and must be less than 10 (thus the last value is 9). In every loop, it
is incremented by one (‘i++’).
</p><p>
The third line is more interesting. By using col["A"], you access a
data column with the name “A” that is hopefully contained in your table
(don’t care, if it isn’t, you will get an error at the time of execution
of the script).
</p><p>
By stating col["A"][i], you are accessing the row with the index i
in the column with name "A". Please remember that indexing in C# always
starts with 0. Thus the cell in the first row of column "A" is accessed
with
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAKAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAKAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"A"</span>][<span class="highlight-number">0</span>]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKAAAACAAA");</script><p>
By stating
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAIAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAIAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAIAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"A"</span>][i] = i*i;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAIAAAACAAA");</script><p>
you set the i<sup>th</sup> row of column "A" with a value, which is i times i.
</p><p>
That’s it! But why not use
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">for</span>(<span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>;i&lt;col.RowCount;i++)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFAAAACAAA");</script><p>
which is the default statement when you create a new worksheet script?
That’s because col.RowCount specifies the number of rows of the whole
worksheet (one more than the index of the last data row that contains
any value). And because our worksheet was empty at the beginning,
col.RowCount initially is 0 (zero)! This would mean your loop is not
executed at all, and no values are filled in your data column!
</p><p>
In addition to <strong>specify a column by its name</strong>, you can also
<strong>specify</strong> it <strong>by</strong> its <strong>position</strong> in the worksheet. For instance,
if column ‘A’ is the first column of your worksheet, the following
statements are equivalent:
</p><ul><li><p><span class="code">col["A"]</span></p></li><li><p><span class="code">col[0]</span></p></li></ul><p>
Again, the first column of the worksheet is specified by index 0 (not
1).
</p><h4 class="subHeading" id="F04E12E705412A07BE60CA4C7585F2D7">Example 2: Calculate column values from other columns
</h4><div class="subsection"><p>
Suppose you have already two columns, for instance col["A"] and
col["B"]. You want to have a new column with is the difference of the
square root of the first column and the 3<sup>rd</sup> power of the second
columns (or whatever fancy mathematical functions you want to use).
</p><p>
At first you have to create your new column by choosing
Worksheet→Add new data column from the main menu.
</p><p>
There are two possibilities to do the calculation using a worksheet
script:
</p><ul><li><p>
Calculate the values for every row in the worksheet using a loop (as
in the previous example)
</p></li><li><p>
Use column mathematics
</p></li></ul><p>
For the example, the values in our new column should be the square root
of the values in the first column minus the 3<sup>rd</sup> power of the values in
the second column:
</p><p><em>Solution 1</em> (using a for loop)
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKAAAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAKAAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAKAAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    <span class="highlight-keyword">for</span>(<span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>;i&lt;col.RowCount;i++)
        {
        col[<span class="highlight-literal">"C"</span>][i] = Sqrt(col[<span class="highlight-literal">"A"</span>][i]) – Pow3(col[<span class="highlight-literal">"B"</span>][i]);
        }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKAAAAAACAAA");</script><p><em>Solution 2</em> (using functions on whole columns):
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAIAAAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAIAAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAIAAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"C"</span>] = Sqrt(col[<span class="highlight-literal">"A"</span>]) – Pow3(col[<span class="highlight-literal">"B"</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAIAAAAAACAAA");</script><p>
Here, the <span class="code">Sqrt()</span> and <span class="code">Pow3()</span> functions are defined in the script
environment, taking whole columns as arguments. Each of this functions
executes the function for each element in the column.
</p><p>
The above code line is equivalent to:
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFAAAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFAAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFAAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"C"</span>] = Map(Sqrt, col[<span class="highlight-literal">"A"</span>]) - Map(Pow3, col[<span class="highlight-literal">"B"</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFAAAAAACAAA");</script><p>
The function <span class="code">Map()</span> takes a function as the first argument (in our case
Sqrt), and applies this function to all elements in the column given as
the second argument. The <span class="code">Map()</span> function is useful if you need to apply a
function which is not defined in the script environment to each element
of a column.
</p><p>
Of course, in our case <span class="code">Sqrt</span> is defined in the environment to take a
whole column as argument. On the other hand, as an example, the <span class="code">Erf()</span>
function is not defined in the script environment. It is defined in
<span class="code">Altaxo.Calc.ErrorFunction</span>. If you want to calculate each element in
column C as <span class="code">Erf()</span> of each element of column A, you can use
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACAAAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACAAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACAAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"C"</span>] = Map(ErrorFunction.Erf, col[<span class="highlight-literal">"A"</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACAAAAAACAAA");</script><p>
The map function is defined for multiple elements, too. Thus the example
above with square root and 3<sup>rd</sup> power can be written as:
</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAAAAAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAAAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAAAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">col[<span class="highlight-literal">"C"</span>] = Map((x,y)=&gt;Sqrt(x) - Pow3(y), col[<span class="highlight-literal">"A"</span>], col[<span class="highlight-literal">"B"</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAAAAAAACAAA");</script></div></div></div><hr /><div id="ID3RBSection" class="collapsibleSection"><p>
Next section: <a href="942E3813AA2CE7361340941CE02C3EAE.htm">2D-Graphs</a></p></div></div></div><div id="pageFooter" class="pageFooter">Altaxo can be downloaded from <a href="https://sourceforge.net/projects/altaxo/files/Altaxo/">SourceForge</a>. Source code available on <a href="https://github.com/Altaxo/Altaxo">Github</a>.<p><a href="https://sourceforge.net/u/dlellinger/profile/" target="_blank">(C) Dr. Dirk Lellinger 2002 - 2018</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dlellinger%40users.sourceforge.net?Subject=Altaxo user manual and class reference">dlellinger@users.sourceforge.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>