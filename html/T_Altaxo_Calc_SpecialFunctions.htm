<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>SpecialFunctions Class</title><meta name="Title" content="SpecialFunctions Class" /><meta name="Microsoft.Help.Id" content="T:Altaxo.Calc.SpecialFunctions" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="Altaxo.Calc.SpecialFunctions class" /><meta name="System.Keywords" content="SpecialFunctions class" /><meta name="Microsoft.Help.F1" content="Altaxo.Calc.SpecialFunctions" /><meta name="Microsoft.Help.F1" content="SpecialFunctions" /><meta name="container" content="Altaxo.Calc" /><meta name="file" content="T_Altaxo_Calc_SpecialFunctions" /><meta name="guid" content="T_Altaxo_Calc_SpecialFunctions" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="This partial implementation of the SpecialFunctions class contains all methods related to the Airy functions." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Altaxo user manual and class reference<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1B7FE024E7E614BFA13DAA1FD005CB2E.htm" title="Altaxo user manual and class reference" tocid="roottoc">Altaxo user manual and class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="Altaxo class reference" tocid="R_Project_Documentation">Altaxo class reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo.htm" title="Altaxo Namespaces" tocid="G_Altaxo">Altaxo Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/G_Altaxo_Calc.htm" title="Altaxo.Calc Namespaces" tocid="G_Altaxo_Calc">Altaxo.Calc Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Altaxo_Calc.htm" title="Altaxo.Calc" tocid="N_Altaxo_Calc">Altaxo.Calc</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Altaxo_Calc_SpecialFunctions.htm" title="SpecialFunctions Class" tocid="T_Altaxo_Calc_SpecialFunctions">SpecialFunctions Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Altaxo_Calc_SpecialFunctions.htm" title="SpecialFunctions Methods" tocid="Methods_T_Altaxo_Calc_SpecialFunctions">SpecialFunctions Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Special<wbr />Functions Class</h1></td></tr></table><div class="summary">
            This partial implementation of the SpecialFunctions class contains all methods related to the Airy functions.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LSTDE5D3A02_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <span class="selflink">Altaxo.Calc<span id="LSTDE5D3A02_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SpecialFunctions</span><br /></div><br /><strong>Namespace:</strong> <a href="N_Altaxo_Calc.htm">Altaxo.Calc</a><br /><strong>Assembly:</strong> AltaxoCore (in AltaxoCore.dll) Version: 4.8.3261.0 (4.8.3261.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">SpecialFunctions</span></pre></div></div></div></div><p>The <span class="selflink">SpecialFunctions</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJEA')" onkeypress="SectionExpandCollapse_CheckKey('IDJEA', event)" tabindex="0"><img id="IDJEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDJEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAi_1.htm">AiryAi(Complex)</a></td><td>
            Returns the Airy function Ai.
            <p>AiryAi(z) is a solution to the Airy equation, y'' - y * z = 0.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAi.htm">AiryAi(Double)</a></td><td>
            Returns the Airy function Ai.
            <p>AiryAi(z) is a solution to the Airy equation, y'' - y * z = 0.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiPrime_1.htm">AiryAiPrime(Complex)</a></td><td>
            Returns the derivative of the Airy function Ai.
            <p>AiryAiPrime(z) is defined as d/dz AiryAi(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiPrime.htm">AiryAiPrime(Double)</a></td><td>
            Returns the derivative of the Airy function Ai.
            <p>AiryAiPrime(z) is defined as d/dz AiryAi(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiPrimeScaled_1.htm">AiryAiPrimeScaled(Complex)</a></td><td>
            Returns the exponentially scaled derivative of Airy function Ai
            <p>ScaledAiryAiPrime(z) is given by Exp(zta) * AiryAiPrime(z), where zta = (2/3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiPrimeScaled.htm">AiryAiPrimeScaled(Double)</a></td><td>
            Returns the exponentially scaled derivative of the Airy function Ai.
            <p>ScaledAiryAiPrime(z) is given by Exp(zta) * AiryAiPrime(z), where zta = (2/3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiScaled_1.htm">AiryAiScaled(Complex)</a></td><td>
            Returns the exponentially scaled Airy function Ai.
            <p>ScaledAiryAi(z) is given by Exp(zta) * AiryAi(z), where zta = (2/3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryAiScaled.htm">AiryAiScaled(Double)</a></td><td>
            Returns the exponentially scaled Airy function Ai.
            <p>ScaledAiryAi(z) is given by Exp(zta) * AiryAi(z), where zta = (2/3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBi_1.htm">AiryBi(Complex)</a></td><td>
            Returns the Airy function Bi.
            <p>AiryBi(z) is a solution to the Airy equation, y'' - y * z = 0.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBi.htm">AiryBi(Double)</a></td><td>
            Returns the Airy function Bi.
            <p>AiryBi(z) is a solution to the Airy equation, y'' - y * z = 0.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiPrime_1.htm">AiryBiPrime(Complex)</a></td><td>
            Returns the derivative of the Airy function Bi.
            <p>AiryBiPrime(z) is defined as d/dz AiryBi(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiPrime.htm">AiryBiPrime(Double)</a></td><td>
            Returns the derivative of the Airy function Bi.
            <p>AiryBiPrime(z) is defined as d/dz AiryBi(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiPrimeScaled_1.htm">AiryBiPrimeScaled(Complex)</a></td><td>
            Returns the exponentially scaled derivative of the Airy function Bi.
            <p>ScaledAiryBiPrime(z) is given by Exp(-Abs(zta.Real)) * AiryBiPrime(z) where zta = (2 / 3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiPrimeScaled.htm">AiryBiPrimeScaled(Double)</a></td><td>
            Returns the exponentially scaled derivative of the Airy function Bi.
            <p>ScaledAiryBiPrime(z) is given by Exp(-Abs(zta.Real)) * AiryBiPrime(z) where zta = (2 / 3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiScaled_1.htm">AiryBiScaled(Complex)</a></td><td>
            Returns the exponentially scaled Airy function Bi.
            <p>ScaledAiryBi(z) is given by Exp(-Abs(zta.Real)) * AiryBi(z) where zta = (2 / 3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_AiryBiScaled.htm">AiryBiScaled(Double)</a></td><td>
            Returns the exponentially scaled Airy function Bi.
            <p>ScaledAiryBi(z) is given by Exp(-Abs(zta.Real)) * AiryBi(z) where zta = (2 / 3) * z * Sqrt(z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI.htm">BesselI(Double, Double)</a></td><td>
            Returns the modified Bessel function of the first kind.
            <p>BesselI(n, z) is a solution to the modified Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI_1.htm">BesselI(Double, Complex)</a></td><td>
            Returns the modified Bessel function of the first kind.
            <p>BesselI(n, z) is a solution to the modified Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI0.htm">BesselI0</a></td><td>Returns the modified Bessel function of first kind, order 0 of the argument.
            <p />
            The function is defined as i0(x) = j0( ix ).
            <p />
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI0MStruveL0.htm">BesselI0MStruveL0</a></td><td>
            Returns the difference between the Bessel I0 and Struve L0 functions.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI1.htm">BesselI1</a></td><td>Returns the modified Bessel function of first kind,
            order 1 of the argument.
            <p />
            The function is defined as i1(x) = -i j1( ix ).
            <p />
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselI1MStruveL1.htm">BesselI1MStruveL1</a></td><td>
            Returns the difference between the Bessel I1 and Struve L1 functions.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselIScaled.htm">BesselIScaled(Double, Double)</a></td><td>
            Returns the exponentially scaled modified Bessel function of the first kind.
            <p>ScaledBesselI(n, z) is given by Exp(-Abs(z.Real)) * BesselI(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselIScaled_1.htm">BesselIScaled(Double, Complex)</a></td><td>
            Returns the exponentially scaled modified Bessel function of the first kind.
            <p>ScaledBesselI(n, z) is given by Exp(-Abs(z.Real)) * BesselI(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselJ.htm">BesselJ(Double, Double)</a></td><td>
            Returns the Bessel function of the first kind.
            <p>BesselJ(n, z) is a solution to the Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselJ_1.htm">BesselJ(Double, Complex)</a></td><td>
            Returns the Bessel function of the first kind.
            <p>BesselJ(n, z) is a solution to the Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselJScaled.htm">BesselJScaled(Double, Double)</a></td><td>
            Returns the exponentially scaled Bessel function of the first kind.
            <p>ScaledBesselJ(n, z) is given by Exp(-Abs(z.Imaginary)) * BesselJ(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselJScaled_1.htm">BesselJScaled(Double, Complex)</a></td><td>
            Returns the exponentially scaled Bessel function of the first kind.
            <p>ScaledBesselJ(n, z) is given by Exp(-Abs(z.Imaginary)) * BesselJ(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK.htm">BesselK(Double, Double)</a></td><td>
            Returns the modified Bessel function of the second kind.
            <p>BesselK(n, z) is a solution to the modified Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK_1.htm">BesselK(Double, Complex)</a></td><td>
            Returns the modified Bessel function of the second kind.
            <p>BesselK(n, z) is a solution to the modified Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK0.htm">BesselK0</a></td><td> Returns the modified Bessel function of the second kind
            of order 0 of the argument.
            <p />
            The range is partitioned into the two intervals [0, 8] and
            (8, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK0e.htm">BesselK0e</a></td><td>Returns the exponentially scaled modified Bessel function
            of the second kind of order 0 of the argument.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK1.htm">BesselK1</a></td><td> Returns the modified Bessel function of the second kind
            of order 1 of the argument.
            <p />
            The range is partitioned into the two intervals [0, 2] and
            (2, infinity). Chebyshev polynomial expansions are employed
            in each interval.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselK1e.htm">BesselK1e</a></td><td> Returns the exponentially scaled modified Bessel function
            of the second kind of order 1 of the argument.
            <p />k1e(x) = exp(x) * k1(x).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselKScaled.htm">BesselKScaled(Double, Double)</a></td><td>
            Returns the exponentially scaled modified Bessel function of the second kind.
            <p>ScaledBesselK(n, z) is given by Exp(z) * BesselK(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselKScaled_1.htm">BesselKScaled(Double, Complex)</a></td><td>
            Returns the exponentially scaled modified Bessel function of the second kind.
            <p>ScaledBesselK(n, z) is given by Exp(z) * BesselK(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselY.htm">BesselY(Double, Double)</a></td><td>
            Returns the Bessel function of the second kind.
            <p>BesselY(n, z) is a solution to the Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselY_1.htm">BesselY(Double, Complex)</a></td><td>
            Returns the Bessel function of the second kind.
            <p>BesselY(n, z) is a solution to the Bessel differential equation.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselYScaled.htm">BesselYScaled(Double, Double)</a></td><td>
            Returns the exponentially scaled Bessel function of the second kind.
            <p>ScaledBesselY(n, z) is given by Exp(-Abs(z.Imaginary)) * BesselY(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BesselYScaled_1.htm">BesselYScaled(Double, Complex)</a></td><td>
            Returns the exponentially scaled Bessel function of the second kind.
            <p>ScaledBesselY(n, z) is given by Exp(-Abs(z.Imaginary)) * Y(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Beta.htm">Beta</a></td><td>
            Computes the Euler Beta function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BetaIncomplete.htm">BetaIncomplete</a></td><td>
            Returns the lower incomplete (unregularized) beta function
            B(a,b,x) = int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BetaLn.htm">BetaLn</a></td><td>
            Computes the logarithm of the Euler Beta function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BetaRegularized.htm">BetaRegularized</a></td><td>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Binomial.htm">Binomial</a></td><td>
            Computes the binomial coefficient: n choose k.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_BinomialLn.htm">BinomialLn</a></td><td>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_DiGamma.htm">DiGamma</a></td><td>
            Computes the Digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_DiGammaInv.htm">DiGammaInv</a></td><td><p>Computes the inverse Digamma function: this is the inverse of the logarithm of the gamma function. This function will
            only return solutions that are positive.</p><p>This implementation is based on the bisection method.</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Erf.htm">Erf</a></td><td>Calculates the error function.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Erfc.htm">Erfc</a></td><td>Calculates the complementary error function.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_ErfcInv.htm">ErfcInv</a></td><td>Calculates the complementary inverse error function evaluated at z.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_ErfInv.htm">ErfInv</a></td><td>Calculates the inverse error function evaluated at z.</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Expm1.htm">Expm1</a></td><td>
            Numerically stable exponential minus one, i.e. <div id="IDBI0EB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBI0EB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBI0EB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBI0EB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBI0EB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">x -&gt; exp(x)<span class="highlight-number">-1</span></pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_ExponentialIntegral.htm">ExponentialIntegral</a></td><td>
            Computes the generalized Exponential Integral function (En).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_ExponentialMinusOne.htm">ExponentialMinusOne</a></td><td><strong>Obsolete.</strong><br />
            Numerically stable exponential minus one, i.e. <div id="IDBJ0GB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBJ0GB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBJ0GB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBJ0GB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBJ0GB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">x -&gt; exp(x)<span class="highlight-number">-1</span></pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Factorial_1.htm">Factorial(BigInteger)</a></td><td>
            Computes the factorial of an integer.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Factorial.htm">Factorial(Int32)</a></td><td>
            Computes the factorial function x -&gt; x! of an integer number &gt; 0. The function can represent all number up
            to 22! exactly, all numbers up to 170! using a double representation. All larger values will overflow.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_FactorialLn.htm">FactorialLn</a></td><td>
            Computes the logarithmic factorial function x -&gt; ln(x!) of an integer number &gt; 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_FallingFactorial.htm">FallingFactorial</a></td><td>
            Computes the Falling Factorial (Pochhammer function)  x -&gt; x(n), n&gt;= 0. see: https://en.wikipedia.org/wiki/Falling_and_rising_factorials
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Gamma.htm">Gamma</a></td><td>
            Computes the Gamma function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaLn.htm">GammaLn</a></td><td>
            Computes the logarithm of the Gamma function.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaLowerIncomplete.htm">GammaLowerIncomplete</a></td><td>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaLowerRegularized.htm">GammaLowerRegularized</a></td><td>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaLowerRegularizedInv.htm">GammaLowerRegularizedInv</a></td><td>
            Returns the inverse P^(-1) of the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0,
            such that P^(-1)(a,P(a,x)) == x.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaUpperIncomplete.htm">GammaUpperIncomplete</a></td><td>
            Returns the upper incomplete gamma function
            Gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GammaUpperRegularized.htm">GammaUpperRegularized</a></td><td>
            Returns the upper incomplete regularized gamma function
            Q(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GeneralHarmonic.htm">GeneralHarmonic</a></td><td>
            Compute the generalized harmonic number of order n of m. (1 + 1/2^m + 1/3^m + ... + 1/n^m)
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_GeneralizedHypergeometric.htm">GeneralizedHypergeometric</a></td><td>
            A generalized hypergeometric series is a power series in which the ratio of successive coefficients indexed by n is a rational function of n.
            This is the most common pFq(a1, ..., ap; b1,...,bq; z) representation
            see: https://en.wikipedia.org/wiki/Generalized_hypergeometric_function
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_HankelH1.htm">HankelH1</a></td><td>
            Returns the Hankel function of the first kind.
            <p>HankelH1(n, z) is defined as BesselJ(n, z) + j * BesselY(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_HankelH1Scaled.htm">HankelH1Scaled</a></td><td>
            Returns the exponentially scaled Hankel function of the first kind.
            <p>ScaledHankelH1(n, z) is given by Exp(-z * j) * HankelH1(n, z) where j = Sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_HankelH2.htm">HankelH2</a></td><td>
            Returns the Hankel function of the second kind.
            <p>HankelH2(n, z) is defined as BesselJ(n, z) - j * BesselY(n, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_HankelH2Scaled.htm">HankelH2Scaled</a></td><td>
            Returns the exponentially scaled Hankel function of the second kind.
            <p>ScaledHankelH2(n, z) is given by Exp(z * j) * HankelH2(n, z) where j = Sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Harmonic.htm">Harmonic</a></td><td>
            Computes the <span class="parameter">t</span>'th Harmonic number.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Hypotenuse_2.htm">Hypotenuse(Complex, Complex)</a></td><td>
            Numerically stable hypotenuse of a right angle triangle, i.e. <div id="IDBIA0YB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBIA0YB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBIA0YB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBIA0YB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBIA0YB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">(a,b) -&gt; sqrt(a^<span class="highlight-number">2</span> + b^<span class="highlight-number">2</span>)</pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Hypotenuse.htm">Hypotenuse(Complex32, Complex32)</a></td><td>
            Numerically stable hypotenuse of a right angle triangle, i.e. <div id="IDBIB0YB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBIB0YB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBIB0YB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBIB0YB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBIB0YB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">(a,b) -&gt; sqrt(a^<span class="highlight-number">2</span> + b^<span class="highlight-number">2</span>)</pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Hypotenuse_1.htm">Hypotenuse(Double, Double)</a></td><td>
            Numerically stable hypotenuse of a right angle triangle, i.e. <div id="IDBIC0YB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBIC0YB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBIC0YB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBIC0YB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBIC0YB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">(a,b) -&gt; sqrt(a^<span class="highlight-number">2</span> + b^<span class="highlight-number">2</span>)</pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Hypotenuse_3.htm">Hypotenuse(Single, Single)</a></td><td>
            Numerically stable hypotenuse of a right angle triangle, i.e. <div id="IDBID0YB0EA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBID0YB0EA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBID0YB0EA_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBID0YB0EA');return false;" title="Copy">Copy</a></div></div><div id="IDBID0YB0EA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">(a,b) -&gt; sqrt(a^<span class="highlight-number">2</span> + b^<span class="highlight-number">2</span>)</pre></div></div></div></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBe.htm">KelvinBe</a></td><td>
            Returns the Kelvin function of the first kind.
            <p>KelvinBe(nu, x) is given by BesselJ(0, j * sqrt(j) * x) where j = sqrt(-1).</p><p>KelvinBer(nu, x) and KelvinBei(nu, x) are the real and imaginary parts of the KelvinBe(nu, x)</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBei.htm">KelvinBei(Double)</a></td><td>
            Returns the Kelvin function bei.
            <p>KelvinBei(x) is given by the imaginary part of BesselJ(0, j * sqrt(j) * x) where j = sqrt(-1).</p><p>KelvinBei(x) is equivalent to KelvinBei(0, x).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBei_1.htm">KelvinBei(Double, Double)</a></td><td>
            Returns the Kelvin function bei.
            <p>KelvinBei(nu, x) is given by the imaginary part of BesselJ(nu, j * sqrt(j) * x) where j = sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBeiPrime.htm">KelvinBeiPrime(Double)</a></td><td>
            Returns the derivative of the Kelvin function bei.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBeiPrime_1.htm">KelvinBeiPrime(Double, Double)</a></td><td>
            Returns the derivative of the Kelvin function bei.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBer.htm">KelvinBer(Double)</a></td><td>
            Returns the Kelvin function ber.
            <p>KelvinBer(x) is given by the real part of BesselJ(0, j * sqrt(j) * x) where j = sqrt(-1).</p><p>KelvinBer(x) is equivalent to KelvinBer(0, x).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBer_1.htm">KelvinBer(Double, Double)</a></td><td>
            Returns the Kelvin function ber.
            <p>KelvinBer(nu, x) is given by the real part of BesselJ(nu, j * sqrt(j) * x) where j = sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBerPrime.htm">KelvinBerPrime(Double)</a></td><td>
            Returns the derivative of the Kelvin function ber.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinBerPrime_1.htm">KelvinBerPrime(Double, Double)</a></td><td>
            Returns the derivative of the Kelvin function ber.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKe.htm">KelvinKe</a></td><td>
            Returns the Kelvin function of the second kind
            <p>KelvinKe(nu, x) is given by Exp(-nu * pi * j / 2) * BesselK(nu, x * sqrt(j)) where j = sqrt(-1).</p><p>KelvinKer(nu, x) and KelvinKei(nu, x) are the real and imaginary parts of the KelvinBe(nu, x)</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKei.htm">KelvinKei(Double)</a></td><td>
            Returns the Kelvin function kei.
            <p>KelvinKei(x) is given by the imaginary part of Exp(-nu * pi * j / 2) * BesselK(0, sqrt(j) * x) where j = sqrt(-1).</p><p>KelvinKei(x) is equivalent to KelvinKei(0, x).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKei_1.htm">KelvinKei(Double, Double)</a></td><td>
            Returns the Kelvin function kei.
            <p>KelvinKei(nu, x) is given by the imaginary part of Exp(-nu * pi * j / 2) * BesselK(nu, sqrt(j) * x) where j = sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKeiPrime.htm">KelvinKeiPrime(Double)</a></td><td>
            Returns the derivative of the Kelvin function kei.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKeiPrime_1.htm">KelvinKeiPrime(Double, Double)</a></td><td>
            Returns the derivative of the Kelvin function kei.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKer.htm">KelvinKer(Double)</a></td><td>
            Returns the Kelvin function ker.
            <p>KelvinKer(x) is given by the real part of Exp(-nu * pi * j / 2) * BesselK(0, sqrt(j) * x) where j = sqrt(-1).</p><p>KelvinKer(x) is equivalent to KelvinKer(0, x).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKer_1.htm">KelvinKer(Double, Double)</a></td><td>
            Returns the Kelvin function ker.
            <p>KelvinKer(nu, x) is given by the real part of Exp(-nu * pi * j / 2) * BesselK(nu, sqrt(j) * x) where j = sqrt(-1).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKerPrime.htm">KelvinKerPrime(Double)</a></td><td>
            Returns the derivative of the Kelvin function ker.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_KelvinKerPrime_1.htm">KelvinKerPrime(Double, Double)</a></td><td>
            Returns the derivative of the Kelvin function ker.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Log1p.htm">Log1p</a></td><td>
            Computes ln(1+x) with good relative precision when |x| is small
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Logistic.htm">Logistic</a></td><td>
            Computes the logistic function. see: http://en.wikipedia.org/wiki/Logistic
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Logit.htm">Logit</a></td><td>
            Computes the logit function, the inverse of the sigmoid logistic function. see: http://en.wikipedia.org/wiki/Logit
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MarcumQ.htm">MarcumQ(Double, Double, Double)</a></td><td>
            Returns the Marcum Q-function Q[ν](a,b). <a href="https://en.wikipedia.org/wiki/Marcum_Q-function">Marcum Q-function (Wikipedia)</a><p>References: A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the
            computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MarcumQ_1.htm">MarcumQ(Double, Double, Double, Int32<span id="LSTDE5D3A02_2" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Returns the Marcum Q-function Q[ν](a,b). <a href="https://en.wikipedia.org/wiki/Marcum_Q-function">Marcum Q-function (Wikipedia)</a><p>References: A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the
            computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE.htm">MittagLefflerE(Double, Double)</a></td><td>
            Computes the Mittag-Leffler function, E_(α)(x).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE_5.htm">MittagLefflerE(Double, Complex)</a></td><td>
            Computes the Mittag-Leffler function, E_(α)(z).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE_1.htm">MittagLefflerE(Double, Double, Double)</a></td><td>
            Computes the generalized Mittag-Leffler function, E_(α, β)(x).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE_4.htm">MittagLefflerE(Double, Double, Complex)</a></td><td>
            Computes the generalized Mittag-Leffler function, E_(α, β)(z).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE_2.htm">MittagLefflerE(Double, Double, Double, Double)</a></td><td>
            Computes the three-parameter Mittag-Leffler function, E_(α, β, γ)(x).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_MittagLefflerE_3.htm">MittagLefflerE(Double, Double, Double, Complex)</a></td><td>
            Computes the three-parameter Mittag-Leffler function, E_(α, β, γ)(z).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_Multinomial.htm">Multinomial</a></td><td>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_RisingFactorial.htm">RisingFactorial</a></td><td>
            Computes the Rising Factorial (Pochhammer function)  x -&gt; (x)n, n&gt;= 0. see: https://en.wikipedia.org/wiki/Falling_and_rising_factorials
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_SphericalBesselJ.htm">SphericalBesselJ(Double, Double)</a></td><td>
            Returns the spherical Bessel function of the first kind.
            <p>SphericalBesselJ(n, z) is given by Sqrt(pi/2) / Sqrt(z) * BesselJ(n + 1/2, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_SphericalBesselJ_1.htm">SphericalBesselJ(Double, Complex)</a></td><td>
            Returns the spherical Bessel function of the first kind.
            <p>SphericalBesselJ(n, z) is given by Sqrt(pi/2) / Sqrt(z) * BesselJ(n + 1/2, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_SphericalBesselY.htm">SphericalBesselY(Double, Double)</a></td><td>
            Returns the spherical Bessel function of the second kind.
            <p>SphericalBesselY(n, z) is given by Sqrt(pi/2) / Sqrt(z) * BesselY(n + 1/2, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_SphericalBesselY_1.htm">SphericalBesselY(Double, Complex)</a></td><td>
            Returns the spherical Bessel function of the second kind.
            <p>SphericalBesselY(n, z) is given by Sqrt(pi/2) / Sqrt(z) * BesselY(n + 1/2, z).</p></td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_StruveL0.htm">StruveL0</a></td><td>
            Returns the modified Struve function of order 0.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/Static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Altaxo_Calc_SpecialFunctions_StruveL1.htm">StruveL1</a></td><td>
            Returns the modified Struve function of order 1.
            </td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_Altaxo_Calc.htm">Altaxo.Calc Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Altaxo can be downloaded from <a href="https://sourceforge.net/projects/altaxo/files/Altaxo/">SourceForge</a>. Source code available on <a href="https://github.com/Altaxo/Altaxo">Github</a>.
<br /><a href="https://sourceforge.net/u/dlellinger/profile/">(C) Dr. Dirk Lellinger and all contributors to the source code 2002 - <script>document.write(new Date().getFullYear()); </script></a><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dlellinger%40users.sourceforge.net?Subject=Altaxo%20user%20manual%20and%20class%20reference">dlellinger@users.sourceforge.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>